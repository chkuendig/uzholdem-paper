%!PS-Adobe-3.1 EPSF-3.0%%Title: Logo IFI_e.ai%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Universität Zürich%%CreationDate: 06.06.2006%%BoundingBox: 0 0 191 57%%HiResBoundingBox: 0 0 190.2413 56.2374%%CropBox: 0 0 190.2413 56.2374%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Logo IFI_e.ai) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='Ôªø' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2006-06-06T09:19:11Z</xap:CreateDate>
  <xap:ModifyDate>2006-06-06T09:19:29Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>76</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qpXNzbWtvLc3MqQW0&#xA;KmSaaRgiIiirMzNQAAdScVYQ/nfzB5gYJ5Os0j0968Nf1GOQxyjoGs7NDHLOlf8AdsjxR+DMMVSv&#xA;U9Agj1PTbPzVruoane6s7iK3lupLe3RIkq8j2enGzhESuUTlI8nxOoqScVTofk5+XjfFPoOmSynq&#xA;76fZynw2a4ink+9zviqT+YfJfkby4tl6Ef6MmvbiO1sk0uW506dixq7VspoE4RR1Zz6RUKNwcVTB&#xA;7b8xfLoMlnqC67ZJubHV+CSU2PGLUbeOMDav+9Fuan/dnfFU/wDLXnPStdlns1SXT9ZtAGvtGvVE&#xA;d3CDsH4gskkbfsyxsyHs2Kp/irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVUrm5t7W2lubmVYbaBGkmmkIVERByZmY7AACpOKvO4IJvPlxHrGsg2vlSB1k0jSbgcI51q&#xA;DDe30b05s5o1vA2yCjuCxVQqgbv81bd/Nmh6b5TaHUoJbuWz16wHNNRSYER/vYpI+SRxVaQuSAeF&#xA;AaYqg/zFvUT8xS0Ymiuzp9tpouY3Sgiuroyt+7kjkB/eJGdiDRSO+yr1myu+djZy3DqstxHGeoAZ&#xA;2TkQoP07Yq8u/OHUo7Pzf5bcrKblIZ4bSSKRUCfX5oLObmHSVWqsgp8O3XFU38xa35xg8r+WLTy2&#xA;HfXr66t7V7t4BLZKkIIuJLw0/dxsqEgIVctRVIxVAWF35d8+6fbTWs36O8w2PqPYX1iQrepBwS7u&#xA;NKkkA9a19ZzG4ZOEn7S/EGxVlXkvzVd6i1xo2tpHb+ZtNVWu44q+jcwOSIr225b+lLxNVO8bgo3S&#xA;pVZTirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirA/PEjeYPMFn5NjH&#xA;Owjjj1LX0P2ZYzIUs7Nqb8JpY3kl/wCKomHRsVYd+Y2o2fmTWIPKEb3U2nRzCNLnTJI3mXVkkKLJ&#xA;fWUyr61rFNw+NeUSsGVxsvFV6X5P8oW2hW73NwsE/mC+rLq+pQxCL1ppGMknAfEyx+oxIWvv1xV5&#xA;/wCd7PR183XE9+txNdz3dva27xGXjGRB68RcLKgCK5ArTqfkMVZeuo29hpnlVruR5Vk1M2sDNu1Z&#xA;YrmKIHkf2QR37Yqxf8zLPRJPMcN5rCXFyYrm1trMQGSsPrSQMG4pJGOKyJ6jEjanhXFWd+R0P+Go&#xA;VdzKpkuFHOpIAmdeNWLEjbFXlvnzy1rXk/XdBuND1i08teSIJo5Lyed5uSm1SWRLWSWWV2MFCVgt&#xA;4gEqz8l6clWT65erqulad5+8uW1wl5p7TXFtb3EMlvPcW4NLy0MUgDcbuGL1IqinqLG3fFXoenX9&#xA;nqOn22oWUoms7yJLi2mX7LxSqHRh7FSDiqIxVg/5YeY9a1ufzmup3H1hdJ8y3um6eOEaenawxQNH&#xA;H8CryoZG+Jqt74ql+n/mG+n+cPzH/wAR6h6XlvyzJpQtP3PL6ul3Zo8v9yhlflK9fi5U9hiqe6J+&#xA;an5f65rg0PStZiudScSGCMJKqTCH+8NvM6LFPwpU+mzYql3+LNJ0HX/O2q615oefSNMfTI59KNnK&#xA;F0lpoVG0sau04uTMkjFVonfvRVlWs+YdH0ZrBdSuPQbVLuPT7BeDuZLmYMUjARWpsjEsdgBuRiqS&#xA;aj+bH5eab5hHl691qKHVfUSB4+ErRxzS/YjlnVDBG7V2V3BxVU1X8z/Imk622h6hqqQaus1vbiyM&#xA;czSNJeCsPAKh5gj7TLVV/aIxV17+Z3kWz8yJ5an1RTrTyxW5tYoppgk1wQIo5ZIkeKJn5CgdhiqQ&#xA;6p52tPLOpefNWvPMEmpQ6cLKODQBYzldOuDZmVU9WJZGmW65LIzAUj6E4qiPIX5x+VvM2meXVluG&#xA;t9d1uBP9DNrdwxG7S1W5uI4pZowjKgJ4tzIYD4ScVZdH5h0eXX5/L8dxy1e2to72e2CP8EErtHGx&#xA;k4+nVmRqLy5bVpTFVvmLzNoPlvS31TXL2OxsUZUMslTV3NFRFUMzs3ZVBOKpTZfmf5HvtBvdds9R&#xA;Nxp+mssd+sdvctcwu7BVWS0Ef1lSS3+++m/QYqwX/nGeTyzqHk4a3bLJN5rvUDeZtRnjuVeeZ5ZX&#xA;T97MojlCgmnpkhemKs482eW/Oep36XOiecp/LtnHCEls4rGyulaQMzNKZLlHcVVgtAabfPFWG/lj&#xA;521q38q+ZfOPnTzG+peUre7aPRdSls4YXa0tmMMl0I7KIFknlPwChNFr3xV6ZrHmHR9HfT49SuPQ&#xA;fVbtNPsBwd/UuZUeRI/gVuNViY8moNuuKpPD+Z/kSbzCvl2LVUfW3uprIWAjm9QT26hpAw4fCgB2&#xA;kPwN2JxVDeQdbs7b8ubfVNU80DXrW0+tm88y3MBsFkEFzKjl4nPwCIp6fvxr3xVgn5rfmf5G84fl&#xA;D5ytfLupfXZ7ewWaRTBcQgxmaNQ6NNHGrrU9VJxV6Fov5p+QNb139BaXrEVzqbeoYYgkqpMIf7z6&#xA;vM6LFPwpv6bNirG9C1KeHSfNXnJBDJe3Vxe3VitzLHBEy2zNpunIZZGSNEdbQtUsP709ziqT/kto&#xA;eq3vmXWfMPmTQbbSNb0+R7OSa1ijiF3cyuzz3UzQySxvLxKg8WIXkwqT0Vez4q8e873F1D5jvxpt&#xA;vHOsk6i8PKTaJbdefHhUBzI7dadD3xVMNZt9F1HTPKkZnIl0rWU1Bkt5KBHieZj6g+LuTs3y74qh&#xA;vPGpOdYmudFWG9lZoSxDMylOVsJhWOvxejyK+9O2Ks58hJAvlqERU/vbjlQ1NRO4WpNT9gDFUx1/&#xA;Shq2j3VhzWKWZD9WuGQS+jOvxQzhG2LRSBXX3GKvJ/yv1/yx+ntT8r6Fqd/eXTWUd3NaX5vpxDqV&#xA;rIRM31u+9PmZmZDxSIKeDH2xVmv5XyR2+mapoUZ/c6FqU9vaL0pZ3Kpf2igfyxwXaxj/AFcVZnir&#xA;zT8mSE1H8xbZzSdfNt7M0R+0I5re2MbU8GCmmKvPPzC/eaf+ftwnxQN+h4VkH2TJDZQiRa+Kk74q&#xA;9E/NKztbG5/LaKziWCO18z2VtbrH8PCH6ldL6a06LxUCmKpbZ+X4fMfmr85tBmpw1P8AR9rVuitL&#xA;o8aq3zViGGKpX5E12fzv5i/L6O5BL+WdEn1PV1O4GpFjpSKw3oytFcsBirF/I9n+YPmb8jr3Q7Ty&#xA;jY3kXmP9IveaxNqqxytfTXMnKeW3Ns/xwyquxkr8A3GKvQPy00+eP81fN8uqIj61a6P5dgnuPtkO&#xA;9vP9YCud6NJECfGgxVD3Muv/AJTaxq+r3EMWq+QfMGrm+vrqMlL/AE651GRImaRT8M9v6hVV4/Go&#xA;7Gm6q63/AOUi/O3/AIw2f/dDTFUu1mF7b8gvIHmmFS1x5RttB1nigJZoIreKK6TbsbeVyflirKfy&#xA;oePWdZ86eckb1IdX1X6hp8q7o9lpEYto3Ru6vN6zYqpfmEBN+bX5YW1yOVgZ9XuAjbobuCyU25Nf&#xA;2lDSMvuMVdbqsP8AzkbdragKl35Ujm1MLsGmi1Ax2zvTq3pmRR7DFVf/AJx6/wDJL+VP+YQ/8nXx&#xA;V35w6tqFxY6f5G0SUxa75wlaz9ZPtW2noOV/de3GH4F/ymFN8VQf526TYaP+QWv6Vp0QgsbHTo7e&#xA;2hXoscbxqo+4YqivzfkT9Ifl4vIcm82WbKtdyBaXVSPbcYqs/J60tl1j8xbtYlF1L5quopJgPjaO&#xA;O1tmRSfBTIxHzOKvN4PRf8kvIdregNot35zMOso/901qdYvW4y9vTMyx8q4q9M/5yEVR+S/moAAB&#xA;bMAAdh6qbYqpfmlZ2tjc/ltFZxLBHa+Z7K2t1j+HhD9Sul9NadF4qBTFWNSw2t1/zj9pcd567R39&#xA;poomS0Ev1iQyx2936UXoQ3T8nnlbf02677Yqzj8n/LlvoPk2K3htr+z+sym4e21X6v8AXEJRIwsp&#xA;tjwJCRruQHPVxyrirN8VeRazf2San5njSbTqOksd4Llk9aghvqC3+IfvfX9EEUPwk96Yql2tXlto&#xA;Wk2WsXV2xstbv5ktlsljkSNp53c9U2jSp6EmnjiqZ6ZEmi+Z9TtLi6017kXNt9YbUHQD6uyWxmKE&#xA;+l8fpV4Dj9rrUHZVlv5USQv5D070mVgrTq/Eg0YXEmxp3xVl2KvIPLkl6n5tSWdnbW76Pb3WoGfU&#xA;hFbS3LXNwGlkgRvWkmt4YQsSyHYs/AcApJxVlPkoen5t8wRL9mSx0e5bt8bwSwn/AIW3XFWbYqwj&#xA;zH+U+javr02v2Wq6r5d1e7jSLULrRroWxukiHGP10dJY2ZF2VuPIDviq5vyj8pjyDqHkiE3MOm6q&#xA;Xk1G8EvqXs08rK8k8k0yyc5XKCpZTttiqd+ZPKmneYJdGlvJJo20PUYtVtBCyqGnhjkiVZOSvVOM&#xA;zVAoem+Ku0jypp2l+YNe1y3kma78wyW0t6kjKY0a1t1tk9IBVYAogLcid/DpiqX+T/y38ueUtX8w&#xA;arpXrfWfMl19cvhKysiNyd+EIVV4pzmdqEnc4qlV7+TWiSX17caZrWtaDa6nK9xqGmaVe/V7WWaT&#xA;+8k4FHaNpP2jEy1xVkml+UtN03zLrHmG3kma81uKzhuonZTEq2CyJF6YChgSJjy5Me3TFWPXf5Qa&#xA;Nf6qLzVNZ1nUbAXp1FdCurznp4uPUMq/uggcojmqxl+A8MVT2z8laNbar5k1EmWd/NJh/SdvKymI&#xA;LBbLaBYwqqwDRr8VWO/SmKsH8zaf5X/LX8sdU0W61LUNVtNStJtN0TSr9/rTu7WzpDY2wiiUhWGw&#xA;5VPvirMPyy8r/wCFfy/0DQGULNYWcSXIHT6ww5zkfOVmOKorzf5N0fzVYQ2uoGaGW0nS6sL+0kMN&#xA;1bXEdQssMorxahI3BBHUYqh/KPkLSfLM19eRXN3qer6mU+v6vqUonupViFI4+SrGiolTRUUDfFUX&#xA;5N8qad5S8saf5c06SaWx02P0oJLhlaUryLfGUWNSat2UYqx7zT+Utlr/AJsXzSnmHWtG1VLMaep0&#xA;ye3iQQCQylR6sEzDk5q1G3oMVRemfltaQaRq+j6zrereZtP1mEW9zDrE8Uvpx0dWEJhityhfnueu&#xA;wpSmKpVafkhoMWoaPqF5rmt6pdaDcRXGktf3izLCIgQYlX0lUo4pzYjmaD4sVZX5b8qad5fl1mWz&#xA;kmkbXNRl1W7EzKwWeaOOJlj4qlE4wrQGp674ql1j+Wfla38jP5JuYpNR0KVrhpY7tgZGNzcvdMec&#xA;axUKSyVQqARQb13xVJT+SelzaFqmh3/mXzBqWnapa/UjFe3qT+hEJFk/cBoqc6oBycMabYqyvzJ5&#xA;U07zBLo0t5JNG2h6jFqtoIWVQ08MckSrJyV6pxmaoFD03xV5zaWCT/lBfaVIrgaHGYZYYfXErHQr&#xA;545VhFtJBMXaG0QKI5FryXcA4qnH5FyCLyvNYTwJaalHObm+sYzKVge46Rf6TLPclk4UcyU+KvH4&#xA;aYq9IxV5Drs10NX19WaSBT6yxpHNwW4/0XURwmXj8SBC8oX+aMe2Kqmo6Ta+cNJs9IvbekuhumoX&#xA;EUdxGGVJZJRGz8hsrejIAfY4qutdcbVNdu9TtXaK0uLuxkhntbkKJD/ogjiZwtCkz8Y2B68qYqyv&#xA;8qTIfImm+ooUgzgcTyBH1iTfoP1YqyqaWKGJ5pXEcUal5HY0VVUVJJPYDFXiP5c2Oman58uPNMum&#xA;2i3MAutTbUbbUZppoI7kyCK2uNNu4UuLVpFuJZaCiM3I7/AMVZ3+XsTSaz5qvSKBLu101SKUP1Cx&#xA;hEhqPCeWRP8AY4qzbFXn3/K6NCjuL9rvR9WtNG02+uNNu/MMkET2CTWs7W8jM0M0syR+ov23jAA3&#xA;NMVegKysoZSGVhVWG4IPcYq3irsVaZlVSzEKqirMdgAO5xVStLu1vLWG8s5o7m0uY1mt7iFg8ckb&#xA;gMjo6kqyspqCOuKq2KuxV2Koewv7DULOG9sLmK8srhQ8FzA6yxSKejI6Eqw9wcVRGKsZ8oebrzzH&#xA;e63TTha6Vpd9PptreGcPLcTWkrQ3BaAIvpKrp8B5tyHhiqYaF5ksNauNYgtEkVtFvm026MgUBpkg&#xA;inJjozVTjcKKmhrXam5VQvnfzU3lnRFvobM6he3N1a6fp9j6ghEtzezrBErSlXEa8nqzcTQdsVTm&#xA;yku5LOCS8hW3u3jRrm3jf1UjkKguiyFY+YVtg3EV8BiqvirsVdiqCutXsIJLm3Eonv7W3+uPp0JV&#xA;7owksFZYQeZDtGyqehYUxVdpV/8ApHS7PUPq89n9cgjuPql2npXEXqoH9OaOp4SJWjLXY4qi8Ved&#xA;TGHy9541ayu4vU0nzDC+qW0dAys6RJb6nbgGg3RILgD9r954HFUP5MtdH8u3Ut7cX+oapetCLO29&#xA;VLeGC2s43LRQQW8HpxrQU5MasxFa9sVZb/jXSv8AfU//AAKf814qw6a+hlfzO72Ujvf2zJprMIif&#xA;VZblagl/g+GcCvgTiqd6Dr2i2enhJ7F1upVKXTCOItIoZiiuwb4gA5pXxxVL9L1LS7XzJqNy2nsm&#xA;nSsj2iqkPEMkUABVA3wkPG3bFVfyJr8GkeVbHT763mjuoPV9RB6bAc5ncbq5HRhiqeS+cdGlieKW&#xA;3mkikUrJGyRsrKwoQQWoQRirE1l8geUNL1fUNB0g2EZgja6tYFCxyLC5EUEMIYoHuZZRFxUDkz1N&#xA;cVZh5F0O70TytZWV8yvqjh7vVZFpR727ka4umFO3rStT2xVP8VeRaJe6ZZfld+YtzqjKtgur+Z1u&#xA;A+4ZXu504U7ly3EDuTTFWIahJ+a0yaT5a0a11RtU8v8AlTSZ4I7G9t7FF1OZHVpb1LiWA3MXK19P&#xA;06MB8VRUjFWTXemarrfmD8xbu68y6tpb6CbV9NsbO9kht7SQ6Pbzu7Ip4So0u/B6psxp8RJVY55z&#xA;89axfeTm80aY+vnzJpOi6bf6i1jcx2uj2NzPbR3hW4t5JYTcl1mBdPTkopFOJxVld1pF1rvmn8zD&#xA;e61qqWelejBY6dbXs1vbRrNpFvLIeERU/E+/WlamlWaqrGvI3li7vh5B8vR+YtbstLvPJx1i6jtt&#xA;RuEZp2+oxoqPz5RxxerVESgUDj9lmBVRPkfVPMdvbflx5jm1nU9Uv/NUN6NYs7i5aS2lEWnT3USx&#xA;W391EyyW6AMgBO/KtTiqU+X9W/NObyNrfmu6Gqw2Gp+UtT1C41O41C3khGoND69pNp0EMzy2iqjS&#xA;LxCpSi1+IYqzHTdI1Cx8y+XNIl8waze23nDRL6XVWuL6YvHcWotHSe0ZSptm/wBJcUi4r022xVOf&#xA;+cetOisvyg8uNHLPL9btUuXE80kwRmUKUiEjN6cfwbIlFBqabnFWG6Pea83lbyf58k1/UptV8z6r&#xA;Z2mqaa11J9R9DUrhreWCG1BCQtbI1VdAHBSpPXFWV/kVoUGmaX5lMV1eXBbzDq1ufrd1Nc7W19Mi&#xA;uBKzASODWRxu53apxViN5+kZdWv9Ps9Su9LTU/zINpeT2ErQSvbtoCu8fNezcB8jRhRgCFUH5r0m&#xA;edrzyxdavqtzZ6D5y0C1066kv7g3Sw6ktnNIHmDB5GieVjC7ksnY7YqnXmObWGsfP+vx6/qOn3fk&#xA;MiDQrJbqQQFbPT4LxXvIuXG6N3JKVJm5GnTfFUv84X3mGS2/NXzAmtarYz6Hb2w0vTobuSO3tmud&#xA;ItpJSI1I+MO5I3+FqsKEklVH3vlXUoPN+t+Xn82eYJLGy8vQ60jDUZklN/JLcwtJ6inmsdLYMIQf&#xA;TBJ+HpRVLfNnnHU9R/L7TtXs73XZvNWneVbTXb19JuIbSwtpZ7YzpcX6vJAJvUeJ/wByA9VU0Tfd&#xA;VOItOV/zW1jzAl3fR3jeULXU0iF5cGBJZ3vIygiL8DEnHmiEcVerCjYqs8lHVPOraFpOr67qllBY&#xA;eUtD1JVsryW1uL65v45BPdTTxsJpAhgVaFqcmJO5xVOvLv6U0f8AMiW081XGqyXmq3N2vlq6F48m&#xA;kz2qIZo7c2qsqxXMNuhLM8fxFSwc1pirMvOnlmTXtJRLSYWmsWEq3ujXzDkIbuIEIXA+1G6s0cq/&#xA;tIzDFWO+WLmx1ewniisotP8AMVlJ9Wv9NufiFrMR/dutCrIUPO3kC0kXia15Yqmmr/4P0m8igvL7&#xA;TtPt+JkvYry5SOXgySNEyGRuSg+hKa1FQjfymirQ/wAHJfzWt1f6csMYhNtbi5RZx66Fx6vxByHE&#xA;ZaOpNRy7DFWIeY7iFrvTJbee2uYbh0QSWgMkJhC27LOrQlFq7uxDN8NNt6HFU/8A0p5MtbTjrms6&#xA;RZah6EcttHLdQwFY5gPRllRmSvJ2C7gg0HicVXTa35C+pyzw67oaX4eQFmvLc26BSxZSpPGsUak/&#xA;ZG6798VTy60HToXgaGGL6k/L6whJaVzxrGImNSN+tGG2KsV8u6dbeavMEepwRgeU9GnEtlIu6X+o&#xA;x1Cyox3ktrPkwjc7PKSw+FExV6VirsVYfB+Uf5fQ6zJrH6LMt7Ldyagyz3N1Pbi7lkMrzLbSyvbo&#xA;/qOWBVBQ9KYqjvMv5f8AlLzLdwXmsWTTXVsjQxzxT3Fs5iZgzRSG3ki9SMsK8HqvtirE1/KHRta8&#xA;7+cNY8zaYZrbUbuzbTnS6liWe3h0+3hkWaO3lQSRiVHXhMCOu1G3VT/zF+Uv5feYrqe51fSfXkuo&#xA;lgukjnuYIpUjXhH6sUEkcbtGuyOy8loOJFBiqf2egaRZ3mp3lvbhbnWJEl1J2Zn9Z4oUt0qHLKAI&#xA;olWgAHfqTiqVeW/y68n+W7iG40axe3mtoJbW3Z7i5n9O3naJ3iQTSSBU5W8fFRstPhpU1VRFj5I8&#xA;r2FvoVvaWIih8tcv0IvqSn0OcD27bsxL1ilZfj5ePXfFUBa/lX5EtU1SO301o4NZt7izvrcXN16P&#xA;1e8NbiOGEy+nAJDufRVcVTo+XdGOo6dqJth9c0mCa106Xk/7qG49MSqFrxPL0E3YEim3U4qo+V/K&#xA;WgeVtPfTtCtmtLGSVp/q5lmlRXcKpEYmeT00ogoiUUdhiqW2P5X+RLHX/wBP2ulrHqQlkuIz6s7Q&#xA;RzS19SWK2ZzbxyNyarJGDufE4qnmkaJpejw3EOnQehHdXM99cDkzcri7laaZ6uWPxSOTQbDoKDFU&#xA;B/gjyv8AW/rn1EfWP0n+m+fqS/8AHQ+rfU/X48uP9x8PGnHvTlvirrnyR5Xubq6up7EPcXl9aapc&#xA;yepKC15p4jW1l2bb0xAnwj4TTcGpqqh9Z/LjyXrWsprOpaaJ79fS5sJZo4pvQblF9YgjdYZ+B+z6&#xA;qNTFURfeSPK9/b67b3diJYfMvH9Nr6ko9fhAluu6sClIolX4OPj13xVFyeXdGl1W61WS2DX95Zpp&#xA;1zMWf4rWN5JFj414j4p3NQKmvXYYqx/VPyf/AC61S0srO90n1LawsU0q3jW4uowbKJeMcMpjlUzB&#xA;OqmTkVPxA13xVM7jyH5VuNXtNYlsj+kLG0OnwSpNOgNqyunpSRo6pKoEr8fUVuJNRQ4qg9R/K7yN&#xA;qGn6VYXGnMIdEt0s9LeC5ubeeK3RVRYfrEMsczJRFqGc1Iqd8VVNJ/LbybpWuHXbOxf9KVlaOaa5&#xA;urhYmuDWZoYp5ZI4i9fiMaiuKsnxVi/mryV+k7tNa0e4XTPM1vH6Ud8Y/UhuIAeX1W8iqvqwltxu&#xA;GQ/EjA9VWHXsvlXUNbt4fzA0c6f5hWGSxs5J7iVIZoZkeORLK9V4YpxIkzAo/Can2lbY4qzKDyl5&#xA;EY/VorCGHmhj+p/HDWP0xGyegSnwPGi8148W4gtWgxViPmjR4l8w3AOrNaW8DRBVmhFxwWW0KPI8&#xA;0vJpCFhYhXJ3qRvviqbaZ5C8rajoVlqeuO91JdWFjGZDcSW0SQ25We3jQQPEKRy0dSSTy3HXFUJ5&#xA;l0L8ptIsTLqVssUFxJKUMtzdKJprj1PUESK7SzvL9YkNIUcksfGuKq6aR5k87EHV4ptF8rEUksZa&#xA;x6jfx945gGb6pbP+3HyMsg2dkHwlVn1ra21pbRWtrEkFtAixwQRqEREQUVVUUAAAoAMVVcVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQGufoL9E3P6e+q/ojgfrf&#xA;170/q3Dv6nq/Bx/1sVeUy/4U+qv/AIC/xF9U2p+ivT/RNa7en+nf9x3GtP7j6N8VSm4/x56s3p/4&#xA;d5f7t/TH6M+sUp8PL6p8HLhTlXbpTbFUbp/+I+UX179K/U/i4/4Y/QPDjTevo/6d4/3OKsw8if8A&#xA;KrP0nL+g+P8AiXifrX6U+sfpmm/L1P0h/pnHr/k4qz7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FX//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -56.2374 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 56.2374 li190.242 56.2374 li190.242 0 liclp[1 0 0 1 0 0 ] concat40.1426 11.3638 mo38.7461 10.4459 li38.8106 10.3482 li39.1114 10.5123 39.2105 10.566 39.4268 10.2378 cv40.7813 8.17676 li40.4971 8.01221 40.0816 7.7671 39.5918 8.34131 cv39.4786 8.2671 li40.0069 7.48877 li42.3536 9.03077 li41.8448 9.82227 li41.7315 9.74756 li42.0645 9.07081 41.6749 8.78614 41.4151 8.59327 cv40.0601 10.6543 li39.8418 10.9869 39.9307 11.0562 40.2071 11.2662 cv40.1426 11.3638 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf45.3287 11.8091 mo45.1138 11.6626 45 11.6275 44.7906 11.855 cv43.7793 12.9527 li43.5918 13.1558 43.2618 13.418 42.9747 13.44 cv42.6309 13.4673 42.2715 13.2569 42.065 13.0665 cv41.9131 12.9273 41.6084 12.6084 41.5655 12.2061 cv41.5381 11.939 41.5596 11.7359 41.9019 11.3643 cv42.961 10.2144 li43.2276 9.9253 43.1441 9.83545 42.9703 9.6377 cv43.0499 9.55127 li44.2129 10.6231 li44.1338 10.7095 li43.8975 10.5103 43.7872 10.4156 43.5084 10.7183 cv42.4493 11.8682 li42.2686 12.0645 41.8311 12.5396 42.3272 12.9961 cv42.9327 13.5542 43.4249 13.0337 43.628 12.813 cv44.5948 11.7632 li44.7881 11.5533 44.8545 11.398 44.5713 11.1119 cv44.6504 11.0259 li45.4078 11.7232 li45.3287 11.8091 lif45.5499 16.7837 mo45.5157 16.7398 45.4766 16.6812 45.503 16.5777 cv45.9864 15.0191 li46.2037 15.1705 46.6124 15.4639 47.0689 15.1128 cv47.6919 14.6334 47.1163 13.8243 46.917 13.565 cv45.9976 12.3707 li45.9053 12.4419 li46.0528 12.6646 46.1338 12.7852 45.8145 13.0308 cv44.1758 14.2925 li43.875 14.5235 43.8067 14.4576 43.5831 14.2286 cv43.4903 14.2999 li44.4551 15.5533 li44.5479 15.482 li44.3926 15.2115 44.3409 15.1216 44.6377 14.8931 cv45.3648 14.3335 li45.4419 14.4341 li44.8721 16.0953 li45.4571 16.8555 li45.5499 16.7837 licp46.4297 13.5142 mo46.5586 13.4449 46.605 13.4205 46.7623 13.6246 cv46.9903 13.9214 46.9483 14.1958 46.5733 14.4844 cv46.0909 14.8555 45.8614 14.7251 45.4834 14.2422 cv46.4297 13.5142 lif46.4483 18.6685 mo45.6421 17.2427 li45.7442 17.1851 li45.8887 17.3941 45.9952 17.5435 46.2476 17.4009 cv48.2198 16.2857 li48.4883 16.1338 48.3882 15.938 48.295 15.7437 cv48.3965 15.6861 li49.2022 17.1119 li49.1006 17.1695 li48.9844 16.983 48.8697 16.7896 48.5928 16.9458 cv46.6207 18.0606 li46.3599 18.2081 46.4395 18.378 46.5499 18.6114 cv46.4483 18.6685 lif48.3516 21.6236 mo47.8643 21.4512 47.4546 21.2222 47.232 20.6656 cv46.8262 19.6539 47.3194 18.8208 48.1319 18.4957 cv49.0137 18.1421 49.9424 18.4961 50.3077 19.4087 cv50.4644 19.7994 50.3858 20.2193 50.4307 20.3321 cv50.4776 20.4498 50.585 20.4517 50.711 20.4517 cv50.7579 20.5689 li49.7413 20.9766 li49.6973 20.8677 li50.0147 20.5645 50.377 19.9957 50.1783 19.5005 cv49.9239 18.8663 49.1915 18.9634 48.4571 19.2574 cv48.1968 19.3619 47.7901 19.5552 47.5762 19.8272 cv47.337 20.1348 47.4092 20.5044 47.4629 20.6392 cv47.5987 20.9781 47.8599 21.2515 48.4083 21.4498 cv48.3516 21.6236 lif51.0127 21.5777 mo51.5899 24.2164 li50.671 24.4166 li50.6456 24.3023 li51.272 24.0552 51.3155 23.7056 51.1807 23.0884 cv51.125 22.8375 51.0889 22.7588 50.8926 22.8018 cv49.8321 23.0337 li49.9229 23.4737 50.0928 23.6812 50.6749 23.6255 cv50.7012 23.7447 li49.1553 24.0826 li49.1299 23.9634 li49.689 23.7837 49.7754 23.5201 49.6763 23.0679 cv48.5699 23.3096 li48.3687 23.3536 48.3331 23.4527 48.3975 23.7496 cv48.4957 24.1978 48.7164 24.6382 49.4698 24.775 cv49.4981 24.9029 li48.5069 24.9283 li47.9219 22.2535 li48.0362 22.2286 li48.1211 22.483 48.1656 22.6216 48.4493 22.5601 cv50.6622 22.0762 li50.9639 22.0103 50.9307 21.816 50.8985 21.6031 cv51.0127 21.5777 lif48.7344 25.5303 mo48.7803 25.8091 48.8194 25.939 49.128 25.9244 cv51.3438 25.8199 li51.6543 25.5425 51.6646 25.4673 51.6622 25.4063 cv51.7784 25.4009 li51.8252 26.3873 li49.9053 28.1036 li49.9063 28.1128 li51.3223 28.0464 li51.6031 28.0328 51.7549 27.9693 51.7647 27.5894 cv51.8819 27.584 li51.9292 28.5894 li51.8126 28.5943 li51.7544 28.2603 51.6456 28.2369 51.421 28.2476 cv48.6675 28.3775 li48.6612 28.2466 li51.0967 26.0464 li51.0967 26.0376 li49.2266 26.1255 li48.8897 26.1412 48.8057 26.2437 48.7847 26.5914 cv48.668 26.5972 li48.6177 25.5357 li48.7344 25.5303 lif50.7227 31.3668 mo51.0577 31.3179 51.6226 31.0962 51.6812 30.5469 cv51.7071 30.3052 51.5948 30.0337 51.292 30.0015 cv51.0411 29.9751 50.9292 30.0523 50.6919 30.4224 cv50.2793 31.0699 li50.1832 31.2203 49.8755 31.545 49.3682 31.4908 cv48.959 31.4468 48.4273 31.0889 48.5186 30.233 cv48.566 29.7906 48.7466 29.5982 48.7618 29.4537 cv48.7725 29.356 48.6915 29.3238 48.6187 29.2974 cv48.6329 29.1626 li49.7823 29.2852 li49.7681 29.4205 li49.2881 29.4629 48.7334 29.6768 48.6705 30.2681 cv48.6109 30.8262 49.0694 30.899 49.1299 30.9048 cv49.4415 30.9385 49.5762 30.732 49.753 30.4449 cv49.9351 30.149 li50.4014 29.3936 50.8018 29.4361 51.0157 29.4595 cv51.2999 29.4898 51.917 29.7017 51.8233 30.5855 cv51.7833 30.9576 51.6065 31.1602 51.5918 31.2955 cv51.5801 31.4019 51.6475 31.4332 51.7334 31.4654 cv51.7188 31.605 li50.709 31.4976 li50.7227 31.3668 lif47.9918 33.5904 mo48.3648 31.9957 li48.4786 32.022 li48.4444 32.2735 48.421 32.4556 48.7032 32.5215 cv50.9087 33.0376 li51.2095 33.108 51.2686 32.896 51.3316 32.6895 cv51.4454 32.7164 li51.0723 34.3111 li50.9585 34.2842 li50.9996 34.0679 51.046 33.8482 50.7364 33.7759 cv48.5303 33.2598 li48.2388 33.1919 48.1827 33.3707 48.1055 33.6168 cv47.9918 33.5904 lif49.2496 36.7613 mo49.586 36.7955 50.1885 36.7188 50.3794 36.2007 cv50.4639 35.9722 50.421 35.6822 50.1358 35.5767 cv49.8985 35.4893 49.7715 35.5372 49.4507 35.8379 cv48.8916 36.3648 li48.7623 36.4869 48.3848 36.7261 47.9058 36.5499 cv47.5196 36.4073 47.0918 35.9302 47.3902 35.1226 cv47.544 34.7051 47.7662 34.563 47.8165 34.4263 cv47.8506 34.3345 47.7793 34.2833 47.7159 34.2398 cv47.7627 34.1124 li48.8472 34.5127 li48.8003 34.6402 li48.3243 34.564 47.7344 34.6358 47.5284 35.1934 cv47.334 35.7203 47.7608 35.9029 47.8174 35.9234 cv48.1119 36.0323 48.293 35.8648 48.5347 35.6294 cv48.7842 35.3873 li49.421 34.7691 49.7989 34.9087 50.0005 34.983 cv50.2686 35.0821 50.8155 35.4385 50.5074 36.273 cv50.378 36.6241 50.1568 36.7769 50.1094 36.9039 cv50.0723 37.0054 50.1299 37.0513 50.2056 37.1041 cv50.1573 37.2359 li49.2042 36.8843 li49.2496 36.7613 lif5.67432 35.6334 mo5.80665 35.8575 5.89551 35.9376 6.18116 35.8199 cv7.56153 35.2525 li7.81739 35.147 8.22754 35.0494 8.49708 35.1509 cv8.81934 35.2715 9.05665 35.6143 9.16358 35.8736 cv9.2417 36.0645 9.38331 36.482 9.25196 36.8648 cv9.16407 37.1187 9.05909 37.2935 8.5918 37.4859 cv7.14551 38.0796 li6.78223 38.2295 6.81983 38.3458 6.89356 38.5987 cv6.78516 38.6431 li6.1836 37.1802 li6.292 37.1358 li6.42237 37.4161 6.48194 37.5484 6.8628 37.3921 cv8.3086 36.7974 li8.55518 36.6958 9.15235 36.4507 8.89649 35.8267 cv8.58301 35.065 7.917 35.3287 7.64014 35.4429 cv6.31983 35.9859 li6.05567 36.0943 5.93018 36.2066 6.06592 36.586 cv5.95752 36.6304 li5.56592 35.6783 li5.67432 35.6334 lif8.38331 34.523 mo8.28565 34.2584 8.22315 34.1382 7.92286 34.2105 cv5.76612 34.7305 li5.51368 35.0611 5.51758 35.1373 5.53223 35.1958 cv5.41797 35.2232 li5.18653 34.2632 li6.74903 32.2164 li6.74708 32.2076 li5.36817 32.5396 li5.09522 32.6055 4.95801 32.6963 5.01954 33.0713 cv4.90626 33.0987 li4.67042 32.1207 li4.78418 32.0933 li4.90381 32.4107 5.01514 32.4126 5.2334 32.3604 cv7.91358 31.7144 li7.94434 31.8418 li5.96582 34.461 li5.96827 34.4703 li7.78809 34.0313 li8.11573 33.9527 8.1792 33.836 8.13477 33.4908 cv8.24805 33.4634 li8.49708 34.4957 li8.38331 34.523 lif7.58497 29.6329 mo7.77247 31.2603 li7.65626 31.2735 li7.60401 31.025 7.56446 30.8462 7.27637 30.8794 cv5.02637 31.1392 li4.71924 31.1744 4.73536 31.3941 4.7461 31.6094 cv4.62989 31.6226 li4.4419 29.9957 li4.55811 29.982 li4.59278 30.1998 4.62305 30.4224 4.93946 30.3858 cv7.18946 30.126 li7.48731 30.0914 7.4795 29.9039 7.46876 29.646 cv7.58497 29.6329 lif4.5044 26.3682 mo4.53565 26.6255 4.62452 26.6871 4.88575 26.7916 cv7.62794 27.8726 li7.62696 27.9986 li4.81739 29.1827 li4.53614 29.3028 4.52149 29.3731 4.4878 29.5738 cv4.3711 29.5738 li4.37891 28.0005 li4.4961 28.0015 li4.51319 28.2964 4.5127 28.4039 4.69043 28.4048 cv4.7793 28.4058 4.97657 28.313 5.09376 28.2666 cv6.57569 27.6612 li5.03907 27.0591 li4.93165 27.0162 4.81006 26.9644 4.7168 26.9634 cv4.53418 26.9625 4.51465 27.0982 4.49903 27.3648 cv4.38233 27.3648 li4.38721 26.3677 li4.5044 26.3682 lif4.43067 25.9185 mo4.84473 23.25 li5.77442 23.3941 li5.75635 23.5098 li5.08301 23.5142 4.91651 23.8248 4.81983 24.4488 cv4.78028 24.7037 4.78614 24.7896 4.98487 24.8204 cv6.05762 24.9869 li6.13086 24.5435 6.04737 24.2891 5.48487 24.1304 cv5.50342 24.0103 li7.06641 24.2525 li7.04786 24.3731 li6.46094 24.3389 6.28614 24.5533 6.21485 25.0113 cv7.33399 25.1846 li7.5376 25.2164 7.60694 25.1373 7.65332 24.8365 cv7.72364 24.3834 7.67676 23.8931 7.02344 23.4932 cv7.04346 23.3638 li7.97657 23.6978 li7.55762 26.4034 li7.44141 26.3853 li7.4546 26.1177 7.4629 25.9722 7.17627 25.9273 cv4.93799 25.5806 li4.63282 25.5333 4.59327 25.7261 4.54639 25.9366 cv4.43067 25.9185 lif8.96973 20.0787 mo8.95215 20.1319 8.92579 20.1973 8.8252 20.233 cv7.26465 20.7105 li7.26807 20.4458 7.28077 19.9424 6.7334 19.7627 cv5.98682 19.5171 5.64161 20.4483 5.53907 20.7593 cv5.06885 22.1915 li5.18018 22.2281 li5.28126 21.98 5.33545 21.8453 5.71778 21.9712 cv7.68311 22.6168 li8.04297 22.7349 8.02735 22.8282 7.96387 23.1421 cv8.07471 23.1788 li8.56836 21.6758 li8.45704 21.6392 li8.32081 21.9195 8.2754 22.0132 7.91944 21.896 cv7.04786 21.6099 li7.08741 21.4898 li8.78126 21.0269 li9.08106 20.1148 li8.96973 20.0787 licp5.77198 21.191 mo5.64161 21.1231 5.59571 21.0982 5.67579 20.8536 cv5.79249 20.4976 6.04395 20.3785 6.49268 20.5259 cv7.07081 20.7159 7.09278 20.9791 6.90577 21.563 cv5.77198 21.191 lif8.17334 17.0259 mo7.84327 16.9522 7.23633 16.9581 6.98536 17.4498 cv6.875 17.6666 6.88331 17.96 7.1543 18.0982 cv7.37989 18.2125 7.51172 18.1802 7.86524 17.9195 cv8.48194 17.4615 li8.625 17.356 9.02832 17.1617 9.48292 17.3936 cv9.8501 17.5806 10.2188 18.1045 9.82764 18.8716 cv9.62598 19.2681 9.38868 19.3834 9.32276 19.5127 cv9.27832 19.6001 9.34229 19.6592 9.40088 19.71 cv9.33887 19.8306 li8.30909 19.3062 li8.37061 19.1851 li8.83448 19.3165 9.42872 19.315 9.69874 18.7847 cv9.95362 18.2847 9.55127 18.0533 9.49708 18.0259 cv9.21778 17.8834 9.01758 18.0284 8.75049 18.2339 cv8.47461 18.4449 li7.76954 18.9839 7.41065 18.8013 7.21876 18.7037 cv6.96436 18.5738 6.46338 18.1558 6.86719 17.3633 cv7.03711 17.0298 7.27442 16.9039 7.33594 16.7828 cv7.38477 16.6871 7.33301 16.6343 7.26416 16.5728 cv7.32813 16.4478 li8.23292 16.9087 li8.17334 17.0259 lif11.4073 16.0689 mo10.5049 17.4361 li10.4073 17.3716 li10.5269 17.148 10.6119 16.9854 10.3697 16.8252 cv8.47901 15.5777 li8.2212 15.4073 8.09229 15.5855 7.96192 15.7574 cv7.86426 15.6929 li8.76661 14.3262 li8.86426 14.3907 li8.75098 14.5796 8.63135 14.7691 8.89698 14.9449 cv10.7872 16.1929 li11.0372 16.358 11.1519 16.2095 11.3096 16.0044 cv11.4073 16.0689 lif13.0523 14.0562 mo11.9659 15.3257 li11.877 15.2496 li12.0777 14.9722 12.1436 14.8804 11.8453 14.6246 cv9.9712 13.021 li9.77247 13.2818 9.47657 13.6636 9.98487 14.2217 cv9.89649 14.3248 li9.19092 13.7027 li11.0167 11.5689 li11.7378 12.1734 li11.6495 12.2769 li11.0196 11.8609 10.6885 12.212 10.4644 12.4449 cv12.3379 14.0489 li12.6402 14.3072 12.7203 14.2281 12.9634 13.98 cv13.0523 14.0562 lif15.5626 11.5718 mo15.4004 11.7271 15.2388 11.6578 14.7491 11.4224 cv12.336 10.271 li12.2378 10.358 li13.1597 12.9668 li13.2872 13.3228 13.3438 13.4854 13.1792 13.6812 cv13.2569 13.7686 li13.9683 13.1392 li13.8907 13.0513 li13.7657 13.15 13.5879 13.2881 13.4698 13.1548 cv13.4205 13.0987 13.3492 12.9058 13.2242 12.566 cv14.0127 11.8682 li14.1607 11.9371 14.5025 12.0972 14.586 12.1919 cv14.6885 12.3072 14.629 12.3667 14.4268 12.5767 cv14.5044 12.6641 li15.6397 11.6587 li15.5626 11.5718 licp13.1558 12.3834 mo12.7315 11.2398 li13.8389 11.7779 li13.1558 12.3834 lif16.2984 8.57862 mo16.0479 8.35108 15.5181 8.05518 15.0562 8.35792 cv14.8526 8.4917 14.7149 8.75049 14.8814 9.00489 cv15.0206 9.21631 15.1509 9.25342 15.5879 9.20166 cv16.3501 9.10987 li16.5269 9.08936 16.9732 9.1211 17.253 9.54737 cv17.4791 9.8921 17.5396 10.5298 16.8194 11.0025 cv16.4478 11.2461 16.1846 11.2291 16.0635 11.3082 cv15.981 11.3624 16.0079 11.4454 16.0333 11.5181 cv15.9195 11.5928 li15.2852 10.6265 li15.399 10.5523 li15.7364 10.896 16.2535 11.189 16.7505 10.8628 cv17.2198 10.5542 16.9854 10.1543 16.9522 10.1036 cv16.7798 9.84131 16.5342 9.86817 16.2002 9.91358 cv15.856 9.96045 li14.9766 10.0792 14.7559 9.74268 14.6373 9.5625 cv14.4805 9.32374 14.253 8.71241 14.9961 8.22413 cv15.3091 8.01856 15.5782 8.02686 15.6915 7.95264 cv15.7813 7.89356 15.7623 7.82178 15.7334 7.73487 cv15.8506 7.65772 li16.4078 8.50684 li16.2984 8.57862 lif0.1846 lw0 lc0 lj4 ml[] 0 dshtrue sadj25.9815 49.794 mo27.6661 49.794 li27.6661 50.0479 li28.0171 50.0479 li28.0166 49.794 li31.0137 49.794 li32.0362 49.7593 32.2022 49.587 32.2022 49.587 cv31.961 49.3912 31.0137 49.4029 31.0137 49.4029 cv28.0215 49.4039 li28.0215 49.0337 li@25.9859 49.4039 mo27.667 49.4039 li27.667 49.0337 li@0.234001 lw3.8639 ml2.09034 28.1187 mo2.09034 13.7291 13.7833 2.08936 28.1294 2.08936 cv42.5245 2.08936 54.1685 13.7291 54.1685 28.1187 cv54.1685 42.4595 42.5245 54.148 28.1294 54.148 cv13.7833 54.148 2.09034 42.4595 2.09034 28.1187 cvcp@0.1852 lw5.75049 41.3248 mo50.5621 41.3248 li@5.38428 40.7037 mo50.878 40.7037 li@6.12354 41.9625 mo27.6055 41.9625 li@28.6416 41.9625 mo50.1866 41.9625 li@5.03809 40.0718 mo51.233 40.0718 li@0.741001 lw0.370606 28.1187 mo0.370606 12.7955 12.8497 0.370606 28.1294 0.370606 cv43.4581 0.370606 55.8877 12.7955 55.8877 28.1187 cv55.8877 43.3921 43.4581 55.8668 28.1294 55.8668 cv12.8497 55.8668 0.370606 43.3921 0.370606 28.1187 cvcp@0.3334 lw23.6514 39.9996 mo23.6514 33.8511 li@24.5835 40.0113 mo24.5831 33.8106 li@20.2159 40.0787 mo20.2159 33.8267 li@0.1846 lw24.795 23.7349 mo31.4986 23.7349 li@0.1852 lw29.0723 28.4136 mo29.0777 27.3008 27.2413 27.315 27.2413 28.4136 cv27.2413 31.9903 li29.0723 31.9903 li29.0723 28.4136 licp@28.1543 11.9585 mo28.1543 11.9585 28.1958 14.6168 28.0718 16.0953 cv27.8653 18.128 27.6207 18.7623 27.6207 18.7623 cv28.6919 18.7623 li28.6919 18.7623 28.4844 18.128 28.2784 16.0953 cv28.1133 14.6168 28.1543 11.9585 28.1543 11.9585 cvf28.1543 11.9585 mo28.1543 11.9585 28.1958 14.6168 28.0718 16.0953 cv27.8653 18.128 27.6207 18.7623 27.6207 18.7623 cv28.6919 18.7623 li28.6919 18.7623 28.4844 18.128 28.2784 16.0953 cv28.1133 14.6168 28.1543 11.9585 28.1543 11.9585 cvcp@0.2594 lw4 ml25.731 23.7388 mo27.2168 22.3526 28.1553 20.9166 28.1553 20.9166 cv28.1553 20.9166 29.084 22.3448 30.5801 23.7315 cv@27.9185 22.2212 mo27.9185 23.1548 li28.3926 23.1548 li28.3926 22.2212 li28.3926 22.2212 28.3926 21.9878 28.1553 21.9878 cv27.9185 21.9878 27.9185 22.2212 27.9185 22.2212 cvf0.1852 lw3.8639 ml27.5352 19.396 mo27.5352 21.7637 li@28.7735 19.396 mo28.7735 21.6558 li@27.9219 20.4244 mo28.1543 20.4234 li28.3873 20.4244 li28.3873 19.8814 li28.1543 19.6729 li27.9219 19.8814 li27.9219 20.4244 lif27.5762 18.8414 mo27.3223 19.396 li28.9869 19.396 li28.7325 18.8414 li27.5762 18.8414 lif0.1512 lw27.5762 18.8414 mo27.3223 19.396 li28.9869 19.396 li28.7325 18.8414 li27.5762 18.8414 licp@0.1852 lw3.8636 ml30.4698 34.9229 mo30.4668 34.4107 29.5586 34.4107 29.5577 34.9229 cv29.5577 36.274 li30.4683 36.274 li30.4698 36.274 li30.4698 34.9229 licp@30.4698 34.921 mo30.4678 34.5484 29.9268 34.5484 29.9268 34.921 cv29.9268 35.8501 li30.4698 35.8501 li30.4698 34.921 lif26.6866 34.9175 mo26.6836 34.4053 25.7754 34.4053 25.775 34.9175 cv25.7745 36.2686 li26.6851 36.2686 li26.6866 36.2686 li26.6866 34.9175 licp@26.6866 34.9156 mo26.6846 34.543 26.1436 34.543 26.1436 34.9156 cv26.1436 35.8453 li26.6866 35.8453 li26.6866 34.9156 lif0.3334 lw3.8639 ml19.2911 40.1158 mo19.2911 33.7349 li@0.2594 lw37.0821 14.1617 mo37.0821 13.3375 li@0.1852 lw3.8636 ml37.3321 13.3375 mo37.3335 13.3375 31.4273 13.3375 31.4273 13.3375 cv@0.2594 lw3.8639 ml31.7242 14.1617 mo31.7242 13.3233 li@0.1852 lw4 ml26.0508 47.649 mo26.8653 48.1382 27.9288 48.0386 27.9288 47.7735 cv@30.2051 47.6158 mo29.3526 48.105 28.252 48.0386 28.252 47.7735 cv@29.2276 46.8321 mo29.1797 46.9566 28.8321 47.3506 28.3624 47.3951 cv@29.3272 47.9234 mo29.3985 48.2222 li29.3477 48.6812 li29.1548 49.1255 li@26.9634 46.8375 mo27.0118 46.962 27.3594 47.356 27.8292 47.4004 cv@26.8843 47.9478 mo26.8174 48.2466 li26.8692 48.6812 li27.0616 49.1255 li@0.143 lw1 lc1 lj3.8636 ml27.377 45.8492 mo27.4278 45.7369 27.3399 45.7261 27.375 45.544 cv27.5889 45.4678 27.5333 45.1695 27.7559 45.2168 cv27.9522 45.2584 28.1968 45.271 28.4244 45.2232 cv28.6006 45.1866 28.5586 45.3414 28.6563 45.4742 cv28.712 45.5503 28.8497 45.5254 28.7862 45.6001 cv28.6885 45.7164 28.8677 45.7437 28.8165 45.8414 cv@0.1852 lw0 lc0 lj4 ml28.9278 44.9317 mo29.2984 43.5489 li29.2984 43.5489 28.9668 43.418 28.815 43.5894 cv28.6114 43.8199 28.8697 44.0669 28.73 44.3296 cv28.6509 44.482 28.5674 44.4976 28.4219 44.4976 cv28.3335 44.4576 28.2159 44.3814 28.2344 44.2457 cv28.2276 44.0923 28.4034 43.9742 28.4034 43.9742 cv28.084 43.5953 li27.7842 43.9742 li27.8604 44.0596 27.9659 44.1168 27.9288 44.2442 cv27.9366 44.3555 27.8516 44.4976 27.7061 44.4976 cv27.5118 44.4976 27.3892 44.3116 27.3892 44.3116 cv27.296 44.0513 27.5547 43.9966 27.4024 43.6182 cv27.2354 43.3946 26.8916 43.5591 26.8916 43.5591 cv27.191 44.9317 li28.9278 44.9317 licp@0.143 lw1 lc1 lj3.8636 ml27.607 45.8101 mo27.626 45.6812 27.9415 45.7056 27.96 45.8257 cv27.9571 45.8218 li27.9571 46.147 li28.2276 46.1456 li28.2334 45.771 li28.2198 45.8101 li28.2754 45.6812 28.5538 45.7056 28.5723 45.8257 cv@28.2803 46.355 mo28.3731 46.3868 28.3516 46.3668 28.4376 46.4073 cv28.5196 46.4454 28.4991 46.5469 28.5264 46.6241 cv@27.9366 46.355 mo27.8438 46.3868 27.8648 46.3668 27.7793 46.4073 cv27.6973 46.4454 27.7178 46.5469 27.6905 46.6241 cv@0.3403 lw0 lc0 lj3.8639 ml24.6182 26.2505 mo24.6182 23.9883 li@0.3334 lw24.5831 29.0367 mo24.5831 26.7671 li@19.2862 33.2569 mo19.2862 29.4957 li@20.2471 28.9722 mo20.2457 23.9883 li@20.2471 33.2554 mo20.2461 29.5909 li@36.0279 40.0787 mo36.0279 33.8267 li@36.0586 28.9722 mo36.0577 23.9883 li@36.0586 33.2554 mo36.0577 29.5909 li@19.2872 29.0132 mo19.2916 24.023 li@37.0147 40.1158 mo37.0147 33.7349 li@37.0098 33.2569 mo37.0098 29.4957 li@37.0108 29.0132 mo37.0157 24.023 li@23.6543 28.9668 mo23.6543 23.9996 li@24.5831 33.3204 mo24.585 29.5684 li@31.6958 40.0113 mo31.6954 33.8106 li@0.3403 lw31.7305 26.2505 mo31.7305 23.9883 li@0.3334 lw31.6958 29.0367 mo31.6958 26.7671 li@31.6954 33.3204 mo31.6973 29.5684 li@23.6543 33.2452 mo23.6543 29.5733 li@32.647 39.9996 mo32.647 33.8511 li@32.65 28.9668 mo32.65 23.9996 li@32.65 33.2452 mo32.65 29.5733 li@0.1852 lw1 lj24.9834 14.1045 mo19.0577 14.1045 li19.2784 14.6138 li24.7051 14.6138 li24.9834 14.1045 licp@24.9834 18.1802 mo19.0577 18.1802 li19.2784 18.6895 li24.7051 18.6895 li24.9834 18.1802 licp@24.982 23.4712 mo18.9444 23.4712 li19.169 23.9805 li24.6983 23.9805 li24.982 23.4712 licp@37.4512 33.2994 mo18.9444 33.2994 li19.169 33.8082 li37.168 33.8082 li37.4512 33.2994 licp@0.2594 lw0 lj23.69 23.3848 mo23.69 18.7085 li@24.6583 23.4527 mo24.6583 18.6856 li@23.69 18.2056 mo23.69 14.6334 li@24.6583 18.2383 mo24.6583 14.6334 li@19.356 23.44 mo19.3487 18.7203 li@20.3243 23.4527 mo20.3243 18.6968 li@19.3511 18.2056 mo19.3511 14.5982 li@20.3243 18.211 mo20.3243 14.5982 li@24.6592 14.1617 mo24.6592 13.3458 li@0.208 lw3.8636 ml22.0372 3.44874 mo22.0372 4.6167 li@0.1852 lw22.0323 4.56983 mo22.2559 4.96338 22.4502 5.39844 22.5362 5.80567 cv22.6426 6.31202 22.6353 7.0503 22.6353 7.0503 cv22.6353 8.00098 li@20.4649 7.27491 mo20.4649 8.04346 li@20.2271 7.46827 mo23.8497 7.46827 li@22.0928 4.51612 mo22.4717 4.76612 22.7706 5.12354 23.0167 5.46143 cv23.4322 6.03174 23.6163 6.67237 23.6163 7.05323 cv23.6163 8.00098 li@21.2725 7.40674 mo21.2637 6.67627 21.2735 6.28516 21.3975 5.80909 cv21.5303 5.29688 21.9854 4.51612 21.9854 4.51612 cv21.6065 4.76612 21.3077 5.12354 21.0616 5.46143 cv20.646 6.03174 20.4502 6.66358 20.462 7.41358 cv21.2725 7.40674 lif21.2725 7.40674 mo21.2637 6.67627 21.2735 6.28516 21.3975 5.80909 cv21.5303 5.29688 21.9854 4.51612 21.9854 4.51612 cv21.6065 4.76612 21.3077 5.12354 21.0616 5.46143 cv20.646 6.03174 20.4502 6.66358 20.462 7.41358 cv21.2725 7.40674 licp@21.2725 7.05127 mo21.2725 8.06006 li@1 lj19.9874 13.295 mo19.9874 9.64991 li19.9874 9.51514 19.9927 9.3877 20.0333 9.2876 cv20.1182 9.0796 20.5967 8.33155 20.5967 8.33155 cv20.5967 8.33155 21.0792 9.22413 21.1631 9.45752 cv21.2042 9.56983 21.21 9.69874 21.21 9.8335 cv21.21 13.3248 li@21.2129 9.75635 mo21.2129 9.62159 21.23 9.49854 21.2842 9.3921 cv21.396 9.17139 22.0528 8.31592 22.0528 8.31592 cv22.0528 8.31592 22.6885 9.15674 22.8003 9.37745 cv22.8545 9.48389 22.8614 9.6128 22.8614 9.74708 cv22.8614 13.3345 li@22.8409 9.48975 mo22.9253 9.25733 23.4698 8.31836 23.4698 8.31836 cv23.4698 8.31836 23.9493 9.08399 24.0333 9.29151 cv24.0743 9.39112 24.0796 9.41651 24.0796 9.55079 cv24.0796 13.3101 li@2 lc0 lj23.9151 8.00098 mo23.9151 8.96827 li20.1885 8.00098 mo23.9151 8.00098 li20.1885 8.00098 mo20.1885 8.91553 li@0 lc24.9918 13.3375 mo24.9932 13.3375 18.9883 13.3375 18.9883 13.3375 cv@0.2594 lw3.8639 ml19.3511 14.1617 mo19.3511 13.3668 li@0.1326 lw23.4571 9.13916 mo23.4571 9.13916 23.5909 9.37208 23.6661 9.48926 cv23.6661 13.2837 li@1 lj21.6041 13.3355 mo21.6041 10.0308 li21.6041 10.0308 21.6016 9.81934 21.6065 9.81934 cv21.6065 9.74073 21.6041 9.66163 21.6421 9.60303 cv21.7178 9.48682 22.045 9.06104 22.045 9.06104 cv22.045 9.06104 22.3624 9.48682 22.438 9.60303 cv22.4761 9.66163 22.4737 9.74073 22.4737 9.81934 cv22.4786 9.81934 22.4761 10.0308 22.4761 10.0308 cv22.4761 13.2999 li@20.3487 13.2989 mo20.3487 9.74024 li20.3487 9.66114 20.3467 9.52979 20.3848 9.47071 cv20.461 9.3545 20.5821 9.15186 20.5821 9.15186 cv20.5821 9.15186 20.7208 9.33692 20.7979 9.46729 cv20.8438 9.54444 20.8594 9.66358 20.8594 9.73926 cv20.8594 13.274 li@16.4976 48.754 mo15.6363 48.754 li15.6363 48.689 li15.792 48.6734 15.8672 48.6656 15.8672 48.4947 cv15.8672 47.1876 li15.8619 47.1876 li15.2139 48.754 li15.1436 48.754 li14.4952 47.2261 li14.4903 47.2261 li14.4903 48.4322 li14.4903 48.6138 14.5367 48.6763 14.752 48.689 cv14.752 48.754 li14.1451 48.754 li14.1451 48.689 li14.3472 48.671 14.3809 48.6324 14.3809 48.4815 cv14.3809 47.2496 li14.3809 47.1148 14.3345 47.0787 14.1504 47.0655 cv14.1504 47.0005 li14.8067 47.0005 li15.3252 48.2247 li15.8438 47.0005 li16.4976 47.0005 li16.4976 47.0655 li16.3521 47.0757 16.2691 47.0811 16.2691 47.3042 cv16.2691 48.4507 li16.2691 48.6578 16.3262 48.6656 16.4976 48.689 cv16.4976 48.754 lif16.879 48.754 mo17.6983 48.754 li18.3516 48.733 18.6319 48.3287 18.6319 47.8511 cv18.6319 47.4517 18.3956 47.0005 17.6695 47.0005 cv16.879 47.0005 li16.879 47.0655 li16.9795 47.0757 17.0938 47.0811 17.0938 47.2393 cv17.0938 48.5181 li17.0938 48.6138 17.042 48.689 16.879 48.689 cv16.879 48.754 licp17.5142 47.2105 mo17.5113 47.1539 17.5088 47.0889 17.6749 47.0889 cv18.1211 47.0889 18.1807 47.6412 18.1807 47.8775 cv18.1807 48.4971 17.9522 48.6631 17.6617 48.6631 cv17.5372 48.6631 17.5142 48.6168 17.5142 48.5127 cv17.5142 47.2105 lif20.7042 48.4244 mo20.5147 48.6402 20.3126 48.8033 19.9805 48.8033 cv19.376 48.8033 19.0494 48.378 19.0494 47.8931 cv19.0494 47.3663 19.4229 46.962 19.9673 46.962 cv20.2012 46.962 20.4004 47.0889 20.4678 47.0889 cv20.5381 47.0889 20.5616 47.0347 20.587 46.9698 cv20.6573 46.9698 li20.6573 47.5767 li20.5923 47.5767 li20.502 47.3511 20.2837 47.0474 19.9883 47.0474 cv19.6094 47.0474 19.5084 47.4444 19.5084 47.8824 cv19.5084 48.0381 19.524 48.2867 19.6202 48.4527 cv19.7286 48.6402 19.9336 48.6788 20.0142 48.6788 cv20.2164 48.6788 20.4112 48.6011 20.626 48.3599 cv20.7042 48.4244 lif22.6802 48.4244 mo22.4908 48.6402 22.2886 48.8033 21.9566 48.8033 cv21.3526 48.8033 21.0254 48.378 21.0254 47.8931 cv21.0254 47.3663 21.399 46.962 21.9434 46.962 cv22.1768 46.962 22.377 47.0889 22.4444 47.0889 cv22.5142 47.0889 22.5376 47.0347 22.5635 46.9698 cv22.6334 46.9698 li22.6334 47.5767 li22.5684 47.5767 li22.4776 47.3511 22.2598 47.0474 21.9644 47.0474 cv21.586 47.0474 21.4844 47.4444 21.4844 47.8824 cv21.4844 48.0381 21.5 48.2867 21.5958 48.4527 cv21.7051 48.6402 21.9102 48.6788 21.9903 48.6788 cv22.1924 48.6788 22.3873 48.6011 22.6026 48.3599 cv22.6802 48.4244 lif24.6563 48.4244 mo24.4668 48.6402 24.2647 48.8033 23.9327 48.8033 cv23.3282 48.8033 23.002 48.378 23.002 47.8931 cv23.002 47.3663 23.375 46.962 23.92 46.962 cv24.1534 46.962 24.3526 47.0889 24.4205 47.0889 cv24.4903 47.0889 24.5137 47.0347 24.5396 46.9698 cv24.6094 46.9698 li24.6094 47.5767 li24.545 47.5767 li24.4542 47.3511 24.2364 47.0474 23.9405 47.0474 cv23.5621 47.0474 23.461 47.4444 23.461 47.8824 cv23.461 48.0381 23.4766 48.2867 23.5723 48.4527 cv23.6812 48.6402 23.8858 48.6788 23.9668 48.6788 cv24.169 48.6788 24.3633 48.6011 24.5787 48.3599 cv24.6563 48.4244 lif33.3653 47.0655 mo33.129 47.0865 33.0796 47.1563 32.67 47.732 cv33.1416 48.4659 li33.2793 48.6788 33.3208 48.6841 33.3936 48.689 cv33.3936 48.754 li32.5118 48.754 li32.5118 48.689 li32.6465 48.6812 32.7188 48.6763 32.7188 48.606 cv32.7188 48.5801 32.6905 48.5127 32.6646 48.4712 cv32.4024 48.0513 li32.3042 48.1832 li32.0889 48.4712 32.0606 48.5308 32.0606 48.5801 cv32.0606 48.671 32.1797 48.6812 32.2706 48.689 cv32.2706 48.754 li31.6221 48.754 li31.6221 48.689 li31.71 48.6763 31.7984 48.6631 31.8916 48.544 cv32.3458 47.9703 li31.8321 47.2164 li31.7774 47.1353 31.7334 47.0708 31.6246 47.0655 cv31.6246 47.0005 li32.522 47.0005 li32.522 47.0655 li32.3692 47.0757 32.3174 47.0757 32.3174 47.1509 cv32.3174 47.1851 32.3252 47.2007 32.356 47.2466 cv32.6075 47.6363 li32.9034 47.2261 32.9034 47.2261 32.9034 47.1563 cv32.9034 47.0757 32.8306 47.0733 32.7168 47.0655 cv32.7168 47.0005 li33.3653 47.0005 li33.3653 47.0655 lif35.5225 47.0655 mo35.2867 47.0865 35.2374 47.1563 34.8272 47.732 cv35.2999 48.4659 li35.4371 48.6788 35.4786 48.6841 35.5508 48.689 cv35.5508 48.754 li34.6695 48.754 li34.6695 48.689 li34.8042 48.6812 34.877 48.6763 34.877 48.606 cv34.877 48.5801 34.8487 48.5127 34.8223 48.4712 cv34.5606 48.0513 li34.462 48.1832 li34.2466 48.4712 34.2178 48.5308 34.2178 48.5801 cv34.2178 48.671 34.3375 48.6812 34.4283 48.689 cv34.4283 48.754 li33.7798 48.754 li33.7798 48.689 li33.8682 48.6763 33.9561 48.6631 34.0499 48.544 cv34.5035 47.9703 li33.9898 47.2164 li33.9356 47.1353 33.8916 47.0708 33.7823 47.0655 cv33.7823 47.0005 li34.6797 47.0005 li34.6797 47.0655 li34.5269 47.0757 34.4747 47.0757 34.4747 47.1509 cv34.4747 47.1851 34.4825 47.2007 34.5137 47.2466 cv34.7657 47.6363 li35.0611 47.2261 35.0611 47.2261 35.0611 47.1563 cv35.0611 47.0757 34.9883 47.0733 34.8741 47.0655 cv34.8741 47.0005 li35.5225 47.0005 li35.5225 47.0655 lif37.6807 47.0655 mo37.4444 47.0865 37.3951 47.1563 36.9854 47.732 cv37.4571 48.4659 li37.5948 48.6788 37.6363 48.6841 37.709 48.689 cv37.709 48.754 li36.8272 48.754 li36.8272 48.689 li36.962 48.6812 37.0347 48.6763 37.0347 48.606 cv37.0347 48.5801 37.0059 48.5127 36.9805 48.4712 cv36.7183 48.0513 li36.6197 48.1832 li36.4043 48.4712 36.376 48.5308 36.376 48.5801 cv36.376 48.671 36.4952 48.6812 36.586 48.689 cv36.586 48.754 li35.9376 48.754 li35.9376 48.689 li36.0254 48.6763 36.1143 48.6631 36.2071 48.544 cv36.6612 47.9703 li36.1475 47.2164 li36.0928 47.1353 36.0489 47.0708 35.9405 47.0655 cv35.9405 47.0005 li36.8375 47.0005 li36.8375 47.0655 li36.6846 47.0757 36.6329 47.0757 36.6329 47.1509 cv36.6329 47.1851 36.6407 47.2007 36.6714 47.2466 cv36.9229 47.6363 li37.2188 47.2261 37.2188 47.2261 37.2188 47.1563 cv37.2188 47.0757 37.1465 47.0733 37.0323 47.0655 cv37.0323 47.0005 li37.6807 47.0005 li37.6807 47.0655 lif39.0655 48.754 mo38.1573 48.754 li38.1573 48.689 li38.2979 48.6763 38.3985 48.6656 38.3985 48.5049 cv38.3985 47.2496 li38.3985 47.0787 38.2769 47.0733 38.1573 47.0655 cv38.1573 47.0005 li39.0655 47.0005 li39.0655 47.0655 li38.9434 47.0708 38.8189 47.0733 38.8189 47.2496 cv38.8189 48.5049 li38.8189 48.671 38.9229 48.6788 39.0655 48.689 cv39.0655 48.754 lif40.4112 48.754 mo39.504 48.754 li39.504 48.689 li39.6436 48.6763 39.7452 48.6656 39.7452 48.5049 cv39.7452 47.2496 li39.7452 47.0787 39.6231 47.0733 39.504 47.0655 cv39.504 47.0005 li40.4112 47.0005 li40.4112 47.0655 li40.2891 47.0708 40.1651 47.0733 40.1651 47.2496 cv40.1651 48.5049 li40.1651 48.671 40.2686 48.6788 40.4112 48.689 cv40.4112 48.754 lif41.7574 48.754 mo40.8497 48.754 li40.8497 48.689 li40.9893 48.6763 41.0909 48.6656 41.0909 48.5049 cv41.0909 47.2496 li41.0909 47.0787 40.9688 47.0733 40.8497 47.0655 cv40.8497 47.0005 li41.7574 47.0005 li41.7574 47.0655 li41.6353 47.0708 41.5108 47.0733 41.5108 47.2496 cv41.5108 48.5049 li41.5108 48.671 41.6148 48.6788 41.7574 48.689 cv41.7574 48.754 lif0 lj24.7579 24.2554 mo31.6817 24.2554 li@24.7579 24.7671 mo31.6817 24.7671 li@24.7579 25.2789 mo31.6817 25.2789 li@24.7579 25.7662 mo31.6817 25.7662 li@0.1852 lw4 ml29 28.3868 mo28.9922 27.48 27.8165 27.48 27.8062 28.3868 cv27.8062 31.5186 li29 31.5186 li29 28.3868 licp@28.586 27.7627 mo28.4092 27.9722 li28.2208 27.775 li28.586 27.7627 lif28.2872 28.0958 mo28.1094 28.3052 li27.9214 28.108 li28.0987 27.898 li28.2872 28.0958 lif28.8858 28.0958 mo28.7081 28.3052 li28.5196 28.108 li28.6973 27.898 li28.8858 28.0958 lif27.9878 28.4288 mo27.8106 28.6382 li27.7999 28.231 li27.9878 28.4288 lif28.586 28.4288 mo28.4092 28.6382 li28.2208 28.441 li28.398 28.231 li28.586 28.4288 lif29.0074 28.6382 mo28.8194 28.441 li28.9961 28.231 li29.0074 28.6382 lif28.2872 28.7618 mo28.1094 28.9712 li27.9214 28.774 li28.0987 28.564 li28.2872 28.7618 lif28.8858 28.7618 mo28.7081 28.9712 li28.5196 28.774 li28.6973 28.564 li28.8858 28.7618 lif27.9878 29.0948 mo27.8106 29.3042 li27.7999 28.8975 li27.9878 29.0948 lif28.586 29.0948 mo28.4092 29.3042 li28.2208 29.107 li28.398 28.8975 li28.586 29.0948 lif29.0074 29.3042 mo28.8194 29.107 li28.9961 28.8975 li29.0074 29.3042 lif28.2872 29.4278 mo28.1094 29.6373 li27.9214 29.44 li28.0987 29.23 li28.2872 29.4278 lif28.8858 29.4278 mo28.7081 29.6373 li28.5196 29.44 li28.6973 29.23 li28.8858 29.4278 lif27.9878 29.7608 mo27.8106 29.9703 li27.7999 29.564 li27.9878 29.7608 lif28.586 29.7608 mo28.4092 29.9703 li28.2208 29.773 li28.398 29.564 li28.586 29.7608 lif29.0074 29.9703 mo28.8194 29.773 li28.9961 29.564 li29.0074 29.9703 lif28.2872 30.0938 mo28.1094 30.3033 li27.9214 30.106 li28.0987 29.896 li28.2872 30.0938 lif28.8858 30.0938 mo28.7081 30.3033 li28.5196 30.106 li28.6973 29.896 li28.8858 30.0938 lif27.9878 30.4273 mo27.8106 30.6363 li27.7999 30.2295 li27.9878 30.4273 lif28.586 30.4273 mo28.4092 30.6363 li28.2208 30.439 li28.398 30.2295 li28.586 30.4273 lif29.0074 30.6363 mo28.8194 30.439 li28.9961 30.2295 li29.0074 30.6363 lif28.2872 30.7598 mo28.1094 30.9693 li27.9214 30.772 li28.0987 30.5626 li28.2872 30.7598 lif28.8858 30.7598 mo28.7081 30.9693 li28.5196 30.772 li28.6973 30.5626 li28.8858 30.7598 lif27.9878 31.0933 mo27.8106 31.3023 li27.7999 30.8951 li27.9878 31.0933 lif28.586 31.0933 mo28.4092 31.3023 li28.2208 31.1055 li28.398 30.8951 li28.586 31.0933 lif29.0074 31.3023 mo28.8194 31.1055 li28.9961 30.8951 li29.0074 31.3023 lif28.2969 31.4371 mo27.918 31.4351 li28.0987 31.2291 li28.2969 31.4371 lif28.8916 31.4332 mo28.5176 31.4351 li28.6954 31.2271 li28.8916 31.4332 lif28.6934 46.7295 mo29.7168 46.9078 li29.7168 46.9078 29.9727 47.1583 30.2754 47.6685 cv30.502 48.0484 30.6348 48.233 30.462 48.7623 cv30.462 48.7623 30.0899 49.1656 29.7305 49.3267 cv@27.5362 46.7164 mo26.5152 46.9078 li26.5152 46.9078 26.2598 47.1583 25.9561 47.6685 cv25.7305 48.0484 25.5972 48.233 25.7706 48.7623 cv25.7706 48.7623 26.1426 49.1656 26.502 49.3267 cv@27.1954 44.9546 mo27.1954 44.9546 27.0948 45.1197 27.1006 45.2398 cv27.1006 45.2398 27.2076 45.4141 27.0303 45.5015 cv27.0303 45.5015 26.7276 45.6656 27.0303 45.8736 cv27.0303 45.8736 27.1192 45.9507 27.043 46.0816 cv27.043 46.0816 26.98 46.3116 27.2706 46.2461 cv27.2706 46.2461 27.3711 46.1812 27.3716 46.2735 cv27.3716 46.2735 27.2559 46.4766 27.3018 46.5147 cv27.5362 46.7164 li@28.9439 44.94 mo28.9439 44.94 29.0538 45.1001 29.0542 45.2203 cv29.0542 45.2203 28.9571 45.399 29.1387 45.4791 cv29.1387 45.4791 29.4512 45.6304 29.1602 45.8506 cv29.1602 45.8506 29.0762 45.9312 29.1592 46.0591 cv29.1592 46.0591 29.2354 46.2857 28.9415 46.233 cv28.9415 46.233 28.837 46.1724 28.8423 46.2647 cv28.8423 46.2647 28.9688 46.4625 28.9258 46.5025 cv28.7032 46.7139 li@27.4727 46.6729 mo27.4727 46.6729 28.1304 47.231 28.7627 46.6729 cv@27.4532 49.7857 mo27.4532 49.7857 27.1876 49.4195 27.4131 49.3843 cv27.4131 49.3843 27.5767 49.4214 27.6299 49.3404 cv27.6299 49.3404 26.9346 48.858 26.5352 49.3648 cv26.5352 49.3648 26.4952 49.5904 26.7217 49.7857 cv27.4532 49.7857 li0 0 0 0 cmykf27.4532 49.7857 mo27.4532 49.7857 27.1876 49.4195 27.4131 49.3843 cv27.4131 49.3843 27.5767 49.4214 27.6299 49.3404 cv27.6299 49.3404 26.9346 48.858 26.5352 49.3648 cv26.5352 49.3648 26.4952 49.5904 26.7217 49.7857 cv27.4532 49.7857 licp0 0 0 1 cmyk@28.982 49.1919 mo28.982 49.1919 29.6211 48.9039 29.8262 49.4341 cv29.8262 49.4341 29.8692 49.7476 29.5821 49.7837 cv28.669 49.7769 li28.669 49.7769 28.8926 49.6529 28.8926 49.5494 cv28.8926 49.5494 28.9458 49.4107 28.7925 49.3877 cv28.7925 49.3877 28.7676 49.2847 28.982 49.1919 cv0 0 0 0 cmykf28.982 49.1919 mo28.982 49.1919 29.6211 48.9039 29.8262 49.4341 cv29.8262 49.4341 29.8692 49.7476 29.5821 49.7837 cv28.669 49.7769 li28.669 49.7769 28.8926 49.6529 28.8926 49.5494 cv28.8926 49.5494 28.9458 49.4107 28.7925 49.3877 cv28.7925 49.3877 28.7676 49.2847 28.982 49.1919 cvcp0 0 0 1 cmyk@25.9004 53.5474 mo30.4043 53.5474 li@22.0372 4.16651 mo22.1797 4.16651 22.295 4.05079 22.295 3.90821 cv22.295 3.76612 22.1797 3.6504 22.0372 3.6504 cv21.8946 3.6504 21.7793 3.76612 21.7793 3.90821 cv21.7793 4.05079 21.8946 4.16651 22.0372 4.16651 cvf28.1504 11.9849 mo28.293 11.9849 28.4083 11.8697 28.4083 11.7271 cv28.4083 11.5845 28.293 11.4693 28.1504 11.4693 cv28.0079 11.4693 27.8926 11.5845 27.8926 11.7271 cv27.8926 11.8697 28.0079 11.9849 28.1504 11.9849 cvf0.1326 lw3.8639 ml19.8145 17.7769 mo19.8145 15.2642 li@24.1836 17.7789 mo24.1836 15.2662 li@24.17 22.981 mo24.17 19.5884 li@19.8028 22.981 mo19.8028 19.5884 li@0.1852 lw4 ml25.8311 49.9424 mo25.8311 53.6294 li@25.8311 48.8462 mo25.8311 49.2593 li@30.4507 49.8658 mo30.4507 53.6324 li@30.4507 48.754 mo30.4507 49.4024 li@25.8311 53.5708 mo25.2754 53.9986 li@30.4625 53.5708 mo31.0186 53.9986 li@3.8636 ml25.8331 47.8277 mo25.837 45.0025 li25.837 45.0025 25.8233 42.9722 27.5796 42.9722 cv27.5796 42.9722 27.5909 42.4205 28.1124 42.4205 cv28.1124 42.4205 28.6329 42.4439 28.6329 42.9537 cv@28.5489 42.9722 mo28.5489 42.9722 30.459 42.9839 30.459 45.0025 cv30.459 47.9434 li@0.208 lw4 ml7.11915 43.3511 mo7.36963 42.938 7.82032 42.5679 8.63233 42.5679 cv8.63233 42.5679 10.4698 42.5679 10.4698 44.4634 cv10.4834 45.0025 li11.3975 45.0025 li11.4268 44.4292 li@11.4258 44.4634 mo11.4258 44.4634 11.4141 42.5679 13.252 42.5679 cv13.252 42.5679 15.0894 42.5679 15.0894 44.4634 cv15.1026 45.0025 li16.0167 45.0025 li16.0459 44.4415 li@16.0455 44.4634 mo16.0455 44.4634 16.0342 42.5679 17.8716 42.5679 cv17.8716 42.5679 19.709 42.5679 19.709 44.4634 cv19.7217 45.0025 li20.6358 45.0025 li20.6656 44.4458 li@20.6651 44.4634 mo20.6651 44.4634 20.6539 42.5679 22.4913 42.5679 cv22.4913 42.5679 24.3287 42.5679 24.3287 44.4634 cv@24.3331 44.438 mo24.3448 45.0025 li25.2525 45.0025 li25.293 44.4429 li@31.9268 44.4634 mo31.9268 44.4634 31.9151 42.5679 33.753 42.5679 cv33.753 42.5679 35.5904 42.5679 35.5904 44.4634 cv35.6016 45.0025 li36.5157 45.0025 li36.5469 44.4458 li@36.5469 44.4634 mo36.5469 44.4634 36.5352 42.5679 38.3721 42.5679 cv38.3721 42.5679 40.21 42.5679 40.21 44.4634 cv40.2208 45.0025 li41.1387 45.0025 li41.1666 44.4415 li@41.1661 44.4634 mo41.1661 44.4634 41.1543 42.5679 42.9922 42.5679 cv42.9922 42.5679 44.8296 42.5679 44.8296 44.4634 cv44.8399 45.0025 li45.7579 45.0025 li45.7862 44.4458 li@45.7862 44.4634 mo45.7862 44.4634 45.7745 42.5679 47.6119 42.5679 cv47.6119 42.5679 48.6495 42.5679 49.126 43.4336 cv@30.9625 44.4537 mo30.9834 45.0025 li31.9092 45.0025 li31.9273 44.4419 li@3.8636 ml25.2872 44.4703 mo25.2872 44.4703 25.669 42.525 27.2442 42.44 cv27.2442 42.44 27.3946 41.8111 28.1124 41.8111 cv28.1124 41.8111 28.8067 41.7261 28.9805 42.525 cv@28.9229 42.4522 mo28.9229 42.4522 30.6827 42.6294 30.9625 44.4703 cv@0.1852 lw28.1817 52.2042 mo27.9063 51.3306 27.5962 50.2242 27.1919 50.0186 cv26.9268 49.9429 26.7374 49.8897 26.4766 50.0962 cv26.1377 50.4566 26.1846 51.4576 26.1377 51.8228 cv26.1104 52.5103 26.1363 53.5396 26.1363 53.5396 cv@26.2134 53.4624 mo26.9854 53.2466 26.1978 52.397 26.6299 52.212 cv27.2012 51.9341 27.2828 53.5474 28.0225 52.5767 cv@29.8106 50.0962 mo30.1495 50.4566 30.1031 51.4576 30.1495 51.8228 cv30.1768 52.5103 30.1514 52.3682 30.1729 53.0503 cv29.6402 53.2193 29.6143 52.1587 29.1441 52.1456 cv28.544 52.1456 28.9112 53.4781 27.7188 53.4664 cv27.8204 53.1714 28.0215 52.5748 28.1739 52.1402 cv28.4493 51.2662 28.691 50.2242 29.0958 50.0186 cv29.3604 49.9429 29.5499 49.8897 29.8106 50.0962 cvcp@30.1729 53.0503 mo30.1729 53.0503 30.2295 53.3121 29.8257 53.1768 cv29.8257 53.1768 29.5015 53.0376 29.2354 53.084 cv29.2354 53.084 28.9688 53.1304 29.1075 53.3736 cv29.1075 53.3736 29.2237 53.5689 29.5826 53.5464 cv@0.1846 lw4 ml28.4107 47.5669 mo28.4107 47.7305 28.2784 47.8628 28.1148 47.8628 cv27.9512 47.8628 27.8189 47.7305 27.8189 47.5669 cv27.8189 47.4039 27.9512 47.271 28.1148 47.271 cv28.2784 47.271 28.4107 47.4039 28.4107 47.5669 cvcp@27.7032 49.1119 mo27.6026 49.0591 27.5347 48.9537 27.5347 48.8326 cv27.5347 48.6587 27.6758 48.5171 27.8501 48.5171 cv28.0245 48.5171 28.1651 48.6587 28.1651 48.8326 cv28.1651 48.9585 28.0918 49.0669 27.9854 49.1177 cv@26.0606 49.7525 mo26.003 49.8609 25.8897 49.9351 25.7584 49.9351 cv25.5704 49.9351 25.417 49.7818 25.417 49.5933 cv25.417 49.4048 25.5704 49.252 25.7584 49.252 cv25.8946 49.252 26.0118 49.3316 26.0665 49.4468 cv@22.1182 9.21827 mo22.1182 13.2891 li22.42 13.2891 li22.42 9.61377 li22.1182 9.21827 lif20.5508 9.27686 mo20.5508 13.3375 li20.3379 13.3375 li20.3316 9.49073 li20.5508 9.27686 lif0.208 lw3.8636 ml34.4297 3.44874 mo34.4297 4.6167 li@0.1852 lw34.4249 4.56983 mo34.6485 4.96338 34.8428 5.39844 34.9288 5.80567 cv35.0352 6.31202 35.0274 7.0503 35.0274 7.0503 cv35.0274 8.00098 li@32.857 7.27491 mo32.857 8.04346 li@32.6197 7.46827 mo36.2422 7.46827 li@34.4854 4.51612 mo34.8643 4.76612 35.1631 5.12354 35.4092 5.46143 cv35.8248 6.03174 36.0088 6.67237 36.0088 7.05323 cv36.0088 8.00098 li@33.6646 7.40674 mo33.6563 6.67627 33.6661 6.28516 33.7896 5.80909 cv33.9229 5.29688 34.378 4.51612 34.378 4.51612 cv33.9991 4.76612 33.6998 5.12354 33.4542 5.46143 cv33.0386 6.03174 32.8428 6.66358 32.8545 7.41358 cv33.6646 7.40674 lif33.6646 7.40674 mo33.6563 6.67627 33.6661 6.28516 33.7896 5.80909 cv33.9229 5.29688 34.378 4.51612 34.378 4.51612 cv33.9991 4.76612 33.6998 5.12354 33.4542 5.46143 cv33.0386 6.03174 32.8428 6.66358 32.8545 7.41358 cv33.6646 7.40674 licp@33.6651 7.05127 mo33.6651 8.06006 li@1 lj32.3799 13.3052 mo32.3799 9.65235 li32.3799 9.51807 32.3853 9.39014 32.4258 9.28956 cv32.5103 9.08106 32.9893 8.33204 32.9893 8.33204 cv32.9893 8.33204 33.4712 9.22608 33.5557 9.45997 cv33.5967 9.57227 33.6021 9.70166 33.6021 9.83643 cv33.6021 13.3345 li@33.6055 9.73584 mo33.6055 9.60303 33.6226 9.48145 33.6768 9.37647 cv33.7886 9.1587 34.4449 8.31495 34.4449 8.31495 cv34.4449 8.31495 35.0806 9.14405 35.1924 9.36182 cv35.2466 9.46729 35.254 9.59424 35.254 9.72706 cv35.254 13.2662 li@35.2334 9.48487 mo35.3179 9.25342 35.8624 8.31788 35.8624 8.31788 cv35.8624 8.31788 36.3414 9.08057 36.4258 9.2876 cv36.4668 9.38721 36.4717 9.4126 36.4717 9.5459 cv36.4717 13.2906 li@2 lc0 lj36.3077 8.00098 mo36.3077 8.98389 li32.5806 8.00098 mo36.3077 8.00098 li32.5806 8.00098 mo32.5806 8.90674 li@0.1297 lw0 lc3.8639 ml35.8492 9.13916 mo35.8492 9.13916 35.983 9.37061 36.0582 9.48731 cv36.0582 13.2876 li@1 lj33.9961 13.3453 mo33.9961 10.0333 li33.9961 10.0333 33.9942 9.82081 33.9986 9.82081 cv33.9986 9.74219 33.9966 9.6626 34.0347 9.60401 cv34.1099 9.4878 34.4376 9.06104 34.4376 9.06104 cv34.4376 9.06104 34.7549 9.4878 34.8301 9.60401 cv34.8682 9.6626 34.8663 9.74219 34.8663 9.82081 cv34.8707 9.82081 34.8682 10.0333 34.8682 10.0333 cv34.8682 13.3096 li@32.7413 13.3428 mo32.7413 9.74708 li32.7413 9.66749 32.7388 9.53418 32.7774 9.47461 cv32.8536 9.35694 32.9742 9.15284 32.9742 9.15284 cv32.9742 9.15284 33.1133 9.33936 33.1905 9.4712 cv33.2364 9.54932 33.252 9.66993 33.252 9.7461 cv33.252 13.3174 li@34.4297 4.16651 mo34.5723 4.16651 34.6876 4.05079 34.6876 3.90821 cv34.6876 3.76612 34.5723 3.6504 34.4297 3.6504 cv34.2872 3.6504 34.1719 3.76612 34.1719 3.90821 cv34.1719 4.05079 34.2872 4.16651 34.4297 4.16651 cvf34.5108 9.21827 mo34.5108 13.3135 li34.8121 13.3135 li34.8121 9.61573 li34.5108 9.21827 lif32.9434 9.27686 mo32.9434 13.2945 li32.7305 13.2945 li32.7237 9.4878 li32.9434 9.27686 lif0.1326 lw0 lj22.004 19.3003 mo20.8521 19.9576 20.9341 20.6753 20.9341 20.6753 cv20.9341 22.9092 li23.0518 22.9092 li23.0518 22.9092 23.0518 21.3589 23.0518 20.6753 cv23.0518 19.8589 22.004 19.3003 22.004 19.3003 cvcp@21.9991 19.9361 mo21.3682 20.3853 21.4136 20.8746 21.4136 20.8746 cv21.4136 22.4 li22.5728 22.4 li22.5728 22.4 22.5728 21.3414 22.5728 20.8746 cv22.5728 20.3179 21.9991 19.9361 21.9991 19.9361 cvcp@22.1866 20.1563 mo21.8223 20.4751 21.8487 20.8238 21.8487 20.8238 cv21.8487 21.9078 li22.5176 21.9078 li22.5176 21.9078 22.5176 21.1553 22.5176 20.8238 cv22.5176 20.4273 22.1866 20.1563 22.1866 20.1563 cvf22.001 15.1431 mo21.1944 15.6099 21.252 16.1197 21.252 16.1197 cv21.252 17.7076 li22.7344 17.7076 li22.7344 17.7076 22.7344 16.6055 22.7344 16.1197 cv22.7344 15.5401 22.001 15.1431 22.001 15.1431 cvcp@21.9971 15.5948 mo21.5557 15.9136 21.5875 16.2618 21.5875 16.2618 cv21.5875 17.3458 li22.3985 17.3458 li22.3985 17.3458 22.3985 16.5933 22.3985 16.2618 cv22.3985 15.8658 21.9971 15.5948 21.9971 15.5948 cvcp@22.1368 15.751 mo21.8819 15.9781 21.9004 16.2251 21.9004 16.2251 cv21.9004 16.9957 li22.3682 16.9957 li22.3682 16.9957 22.3682 16.461 22.3682 16.2251 cv22.3682 15.9439 22.1368 15.751 22.1368 15.751 cvf0.1852 lw1 lj37.3863 14.1045 mo31.46 14.1045 li31.6807 14.6138 li37.1075 14.6138 li37.3863 14.1045 licp@37.3863 18.1802 mo31.46 18.1802 li31.6807 18.6895 li37.1075 18.6895 li37.3863 18.1802 licp@37.3843 23.4712 mo31.3467 23.4712 li31.5713 23.9805 li37.1006 23.9805 li37.3843 23.4712 licp@24.982 29.0015 mo18.9444 29.0015 li19.169 29.5103 li24.6983 29.5103 li24.982 29.0015 licp@37.3843 29.0015 mo31.3467 29.0015 li31.5713 29.5103 li37.1006 29.5103 li37.3843 29.0015 licp@0.2594 lw0 lj36.0923 23.3848 mo36.0923 18.7085 li@37.0606 23.4527 mo37.0606 18.6856 li@36.0923 18.2056 mo36.0923 14.6334 li@37.0606 18.2383 mo37.0606 14.6334 li@31.7584 23.44 mo31.751 18.7203 li@32.7266 23.4527 mo32.7266 18.6968 li@31.754 18.2056 mo31.754 14.5982 li@32.7266 18.211 mo32.7266 14.5982 li@0.1326 lw32.2168 17.7769 mo32.2168 15.2642 li@36.586 17.7789 mo36.586 15.2662 li@36.5723 22.981 mo36.5723 19.5884 li@32.2051 22.981 mo32.2051 19.5884 li@34.4063 19.3003 mo33.2544 19.9576 33.337 20.6753 33.337 20.6753 cv33.337 22.9092 li35.4542 22.9092 li35.4542 22.9092 35.4542 21.3589 35.4542 20.6753 cv35.4542 19.8589 34.4063 19.3003 34.4063 19.3003 cvcp@34.4014 19.9361 mo33.7706 20.3853 33.816 20.8746 33.816 20.8746 cv33.816 22.4 li34.9751 22.4 li34.9751 22.4 34.9751 21.3414 34.9751 20.8746 cv34.9751 20.3179 34.4014 19.9361 34.4014 19.9361 cvcp@34.5889 20.1563 mo34.2251 20.4751 34.251 20.8238 34.251 20.8238 cv34.251 21.9078 li34.92 21.9078 li34.92 21.9078 34.92 21.1553 34.92 20.8238 cv34.92 20.4273 34.5889 20.1563 34.5889 20.1563 cvf34.4034 15.1431 mo33.5967 15.6099 33.6543 16.1197 33.6543 16.1197 cv33.6543 17.7076 li35.1368 17.7076 li35.1368 17.7076 35.1368 16.6055 35.1368 16.1197 cv35.1368 15.5401 34.4034 15.1431 34.4034 15.1431 cvcp@34.4 15.5948 mo33.9581 15.9136 33.9898 16.2618 33.9898 16.2618 cv33.9898 17.3458 li34.8013 17.3458 li34.8013 17.3458 34.8013 16.5933 34.8013 16.2618 cv34.8013 15.8658 34.4 15.5948 34.4 15.5948 cvcp@34.5391 15.751 mo34.2842 15.9781 34.3028 16.2251 34.3028 16.2251 cv34.3028 16.9957 li34.771 16.9957 li34.771 16.9957 34.771 16.461 34.771 16.2251 cv34.771 15.9439 34.5391 15.751 34.5391 15.751 cvf22.167 26.1646 mo21.5049 26.1646 li21.8257 26.4205 li21.8257 27.2251 li21.5049 27.5704 li22.167 27.5704 li22.167 26.1646 lif22.167 30.5928 mo21.5049 30.5928 li21.8257 30.8487 li21.8257 31.6529 li21.5049 31.9986 li22.167 31.9986 li22.167 30.5928 lif22.167 34.6109 mo21.5049 34.6109 li21.8257 34.8668 li21.8257 35.6714 li21.5049 36.0162 li22.167 36.0162 li22.167 34.6109 lif34.5635 26.1646 mo33.9014 26.1646 li34.2227 26.4205 li34.2227 27.2251 li33.9014 27.5704 li34.5635 27.5704 li34.5635 26.1646 lif34.5635 30.5928 mo33.9014 30.5928 li34.2227 30.8487 li34.2227 31.6529 li33.9014 31.9986 li34.5635 31.9986 li34.5635 30.5928 lif34.5635 34.6109 mo33.9014 34.6109 li34.2227 34.8668 li34.2227 35.6714 li33.9014 36.0162 li34.5635 36.0162 li34.5635 34.6109 lif0.1852 lw1 lj32.167 26.2671 mo24.1963 26.2671 li24.4219 26.7759 li31.8834 26.7759 li32.167 26.2671 licp@%ADOBeginSubsetFont: Frutiger-LightCn Initial%ADOt1write: (1.0.21)13 dict dup begin/FontType 1 def/FontName /Frutiger-LightCn def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1991 Adobe Systems Incorporated.  All Rights Reserved.Frutiger is a trademark of Linotype-Hell AG and/or its subsidiaries.) def/Weight (Light) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 68 /D putdup 73 /I putdup 85 /U putdup 90 /Z putdup 97 /a putdup 99 /c putdup 101 /e putdup 102 /f putdup 104 /h putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 121 /y putdef/UniqueID 1055587 def/FontBBox {-100 -250 1000 913} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-7 0 698 705 510 517 750 762] def/OtherBlues [278 282 392 396 -222 -216] def/BlueScale 0.0479583 def/StdHW [54] def/StdVW [58] def/StemSnapH [54] def/StemSnapV [58] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/space <1C60D8A8C9B87A8F8B> |-/D <1C60D8A8C9B7EF3207C727ADD6BDCC53CC6197C91923AABFD8273923EB31B3D911A7C04D136BBCF2CD956CC0F397FFEEA63BCAD25B9C81E7345C1FB8D1F743B42ABF2D5FE597E2D7> |-/I <1C60D8A8C9B88C085E2C5294DABA7F4C8EBD8CA4C8BA1FAFE7F00EDF1F> |-/U <1C60D8A8C9B7FD84B63B30B3219315FFB1F6833C72787877884754B0DC64D4176AD57A897793912CAD7815890828454308574DCBAED64AEAB8DC4EF18D6B9F55AD303E838122> |-/Z <1C60D8A8C9B77FE2960E558325BF6C1279211D717BDC634D5D68AA68BA25BCA8A8D4F4A66FC22825FB5733B20C3A7D5F5B2DFD> |-/a <1C60D8A8C9B77FE28D7D7243B4DC0064135F8F9C3506ADAF46B59A891C757C4C022FFE42D61013FE8B816D2FEB9337805BD3D39FDACC0F28B39D1C1CE6C749B44425F86B5214BEE1E8EAB7E9C86FFE535FD846726F9DC7ED3F3C94EC0FA083831B415F22C07349503DC2D2F2D6625C7796B4E552D5117C9AC25F3E95C0A09B965E05440B2C3C2F1B5DE41BE8E1F49E005746D352D8D4EFA1798CE33B0A478F> |-/c <1C60D8A8C9B7299AF8E00F7141DB7AB67C3A9F6E93A3D1525443D35D70EA77FAB37B5DE9003FFBD88BE5509C9FB8F5FBC982B67FDB9D002DC7FD8D6405C1BC5269702B1CED26CB28D52B5DD3D8B156DE31495BD2D58D4F0BC3C7520D8AFE44> |-/e <1C60D8A8C9B71131937BE3D3241238E93D6E0D9F317321BCD63FFBEEFB6175DC68A86C73B1A2EDF4FCABD96A4594FA4F7FA7DDFD88E0623456011EF0E8A9E0E4DB18980E5FDD5D0CF172D1E8D2C8207E2BD5006530D339AFFB4553C1> |-/f <1C60D8A8C9B869C17C9A982F6D4F5AFCAD6D3B31318DC3729E440F7AD3D66970C83B6729C47C0F78678871BCDB56E7CC46A90C013B8A6B4BC2FF18D014EB121F11DBB85953CA7503D66971089E541311A8B783F4B2425E29FCCE3F7DBE83D056ED9B41472166E291E20EE0> |-/h <1C60D8A8C9B74CDDA17C31F9DCDAF341FAB2A1BFE7FFA5E0F4B13A125E0C9AE6BE71F4863D2BC7840562EA9F7923663E6BC52CD18A0A3A000A4E2C23CCA66821EB2142FC05759594DE1B> |-/i <1C60D8A8C9B89E848964BCE720D28FA5D984EA6A485D589E4F755D3445C1A87F122CB4D91FD78B234BA79685EE38B8064876C09E0CD0D1> |-/m <1C60D8A8C9B6232B20DA2F07C5F6B4A56D2A9DFB40CB73078B5FD4B98F9438CD8AB06454F562DC74865FABE9154C881CE8FB6ED1F72EEE4EA029B71F1E8E66056E40D3058AC916CE56203400FC8CC0C4DBD61DB76D102128D5D271B1B4EBAF071D93A2560EBDB503D20082CC21D266C09457E270795C5D153C30551AB578334D1C8F243851F978> |-/n <1C60D8A8C9B74CDDA17C31F9DCDAF341FAB2A1BFE7FF93C9D9C0968BA298C72CBFB7E6A7A6B6948E8AB21E7F121127D7CE2BE5182293C22643D963F3A6A448D9F65DF98E5D98F7F90F42B39DBB86F7AE9769EECC3218DEE2F851F8F4472278D863> |-/o <1C60D8A8C9B74B0CF9AB1D57749BE8C7DB9D832F9C36848B8E01A002489A2776F89259CE2281A941CB73E0CFC15BDD98710210D2D55A673AD29155749A07B6CFA817B631179E368B54075445FE5DD1858FDE1EC363BD5DADC6A2DD> |-/p <1C60D8A8C9B74CDDA537FA8078C529A736A2BABC30F8D0A73D3303166E209FB46FBDD891BEF480F5F94C60A18133961A15B25F2BCB9D4F43446198EA5D4790B5F56404732FB443294E83313B5463A6350EE0C6729992A7D30357C18A14148F1D84B146D6B3EFBFD53B46183EEBFD5FF86094B4E060682AA7EFFF9764A6F0A2FC226D4D046738DE2EF7AFBDE3CBFE9121483CF0B590182B> |-/r <1C60D8A8C9B854D0CC3729F5F99586643FDC7AF6B09382B00B9155544788302595EEE4692A747426E3CC790CBB0D17736582B605E91909F94DCD6C650B9D14F1C540ED4EBE04E9> |-/s <1C60D8A8C9B80A3FC366865871753EF76F7AEFF7996270C7981C63CC023E12C4992779E99BF232FD524FA9E914EA314DC4CE1492B40C3BF68E691D7B84D0ABB5772AFEF15E90C3D67412047495B4055308D00225A35275F12BFC5E70DC5551BAC6A6C7CC2F4C8B446A354D12> |-/t <1C60D8A8C9B854D0EAE65CA4A49BA42FDE3469FEFFED9D526ADA693CC173881BACBD12C76F763F1A6D07875B79753CC494D6A7CDB07F3496F838A12A8EC35FC7AD256148956C084C35> |-/u <1C60D8A8C9B74CDDA17C31F9DCDAF36552F30FCCB51ED42C37D6D2C771B148C9BF9CE1EAA96258B62731D9DEBB293D5A02048EB01B261EF31B1BD9F8D0261B46226D697D29B394AB2E49981A127A7C51165974863AD91350E721314637BD5D81BE7904> |-/v <1C60D8A8C9B73549AE8328A41433ED162447E707E230A34837B9EDF523265410B730E89E0082DADACBACE8DF0C8B5537D28F4F8191C6E42BF48F16F4> |-/y <1C60D8A8C9B7299AD9DD1C440230A941F951D3950534A08929FDB04661B0EB5EC98ECC8015CFB447892F50D2B75A206F768BDB53108F91B1A3AC87F06866BFC85BBD75F27C531E74E5F737BAF8AD637964C5B450C2CE636287C24CD7A0E3FD6F3E0FC8E3C271D97B145815C983> |-/.notdef <1C60D8A8C9B87A8F8B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/EMAPEP+Frutiger-LightCn /Frutiger-LightCn findfont def/EMAPEP+Frutiger-LightCn*1 [32{/.notdef}repeat /space 35{/.notdef}repeat /D 4{/.notdef}repeat /I 11{/.notdef}repeat /U 4{/.notdef}repeat /Z 6{/.notdef}repeat /a /.notdef /c /.notdef /e /f /.notdef /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}repeat /y 134{/.notdef}repeat] EMAPEP+Frutiger-LightCn nfntEMAPEP+Frutiger-LightCn*1  [18 0 -0 -18 0 0 ]mfnt sfnt64.8911 25.8901 mov(University of Zurich) shEMAPEP+Frutiger-LightCn*1  [13 0 -0 -13 0 0 ]mfnt sfnt65.4639 42.8647 mov(Department of Informatics) sh%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGState/EMAPEP+Frutiger-LightCn*1 ufntAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Universit\612t Z\637rich) (Institut f\637r Informatik)%%Title: (Logo IFI_e.eps)%%CreationDate: 06.06.2006 11:19 Uhr%AI9_DataStream%Gb"-6H!Bi%f/L:U!8g(A&7fP!4K,Wo"VhaT7@Y5&U.c?4LAR&+ZgX0dV548G_tcFhhT'tg>b4:2A7]=`:!#'YGaQT^g`;@NbiGD?%6&82SK[Rd>R>`5@U6Nj].1P^!RBB4G9Z9m7Ti='H,be*n(/Cd&'RCpmU>eahMk+r*,@N^<Lm*iQRh[9fM)`Zu0Z-rS8+W+?N9B[f%0.uC>^*&0QKDsK80\2Je/Z."U5j2C;UbCaMr*UrB'62Nj+!e`,qC_VqRs^U2qEj<Es"/YI3UR:l?(h=Q#i3Z94J&5OaUe;n9pj8#%S'V_GTqS]XbpOa4&&&C!>JIf3%ck>Egq\j.H0_-m=Ra44Kq%54k)IRcE"i3u*5/<4(D%bipg,GPfh?o+MEeuQbqF49/rZ[Fem-"C%6D[Rg.S@LTV5Z/2MAs9khZ6KoK1M-`6imgA1m&2:PNh^*1.m5A(mR(RW+7kR&Z#&Z3gRWi"6&\Wd+oRukEFSc`8o(6,7O`,c>/(4%!5DGel6)[Y9AeSZL4]1S*m>q5d[+\4[@9`h(]r[>GPPYTELss1V#2nD8-S91YqO<e(+2H\J]Sa4+ll/&Mc%%XY99hSgeEKBII`2n%%?\bSQqF17#@oY4Nfh,GK62]-8<LgkoG-mTOZEK"V.N<S1b$t6l9Vg+eK`JE^o6(GKDo8K$'AaJS4$A4U</)*jlAp/*->1X8l>mC%knibe32QF8Xo'j"%4mmmKs;nPgpgRUN"G/<6p6J//V83U-[k74no+F/RTiHk0<StLo"1:5Kc.6\'VM4`^=`9T3$>2"K^K<Q&Y@2j%Zj;^;"df@DiNO'U>+NW;Ltp8\_laQ];i8+0&'Hn8;NV`t/HPtrJl))o_EX0K>"3hQKe)U?Pmd@]=%&-V'f<*$b?"pHo`M2;5Z;:!%/2P;r]-7oflpN<bd?L1Qb>'<\(/iP6<-4fLF[[(hZJAP'1eOPO":@Jk"8n2'k(5Q\]pK*H,]&V:@Q5(aO_IHV*121DqIhdI]Bpb\%8V@+0D[>/iB/9Ee7&h[k(L(/G:"Y7i_m6iBGV\^p]a2kOmUjAfm)ug7C-#VD7YC4t/Yr=AY:tuq(Ab4?L2tGO'=$:*TW5h15_"hu%Zd*$94t$S<n@dWRmm<D8:3J"7O!DM+SRH;errhR)FBV%V@JNq7k3ZPm,br,)Tb^+]q,$;"eP?f*K]-l(76R8;60UjPBeX4'f]7Ol%a99W+\-jQNKG"1g$Snq'=/pY0lGT=En"h\LK>.U]5aG)Jo";O2X!b?O&`jef"B11jb*$Z?$!6;IoENZN=ZiA=a;!?rFHM+3Yu^$j%]/:7f"QBqgFT+.#bWnR$&R$ERSE=`nOpl5"*%/#R;YpAj/$>5^6C1TD4/pStVEUj6G>a8&WPjFtRKr(S(QHp\2Mc&'Q3LgJlA/!f%6.b.+XU^p6dZg&0Zn(^T)#%7o@PhmQjtI;nA)Sf`Bu,/!3enG_r9C%@"/Cu=\:o^$)8U'F)g<XMOiSMikY8V8[_G3=Kd)8\,ct@%%Q5Te;W&/KZG:.7$rpNg*]oWOuT&8J.6mKJpiHNZf_M:Ni0^cb>RK'=UI>Bhl!%:X:Kgm#0E02R^9gVYXo0I0E*V=XikTkBn8=l^<%Uq>i@MASU<F/8/qqG]Lr2\Pth!uIAc7mJ;l$$AM1PEFE1?MI$f,+XUq_@Sg1MN#YT%(#Ce_RM6=:b`"d*eIXHeG^Jr-c;"$oWN'Q%V67ibrdFj^.kk)HoXJe:kXk'710hViU,Z:L0?:b_bD/*!:dMNZ*8cb7O08XT>g0nllBB?:J$<*AIO*Hq*f>#Ul*Y@n=mPq7MRKOs%ciV1<[IKo"<kZWHANNr]Y&+`OZRDbpi/c'2f=kDR?ri^n\b]uB\]GfV>JMF;R#TUQ2;b?^gIVMVe.B"VCfubi;'i;+pe1F'I:]M,%".*7K[.mjCr0K+-9JpWkIKR1PT[=CM<n/DZ@&eC$/%*?(/uSk8),3tYE_uXJ:!qRIP0sa>je/.dU!T6b'0TaCR`@iRG<lgmqd1%l%m/o!KAJPO&U+cR*R!]-"M)o%Ui0!,+"@8+P77;tL&LS2ZP"61!JgM>/5d1A]n0C;_i/U<!E)&\t,sfkQ8Xa22!m-TFa\r=2;A9kB%@T8ji:e;IgU='`M0iW^5.?<D_7$NX.d:b?PNCOZ0A2G#q8*ME8/O\8?(Zf-p%/fs(1_u"g@u4;CQAVMKFGu%k@Vh!]nZFh`-f\/g%)NVktnO,JW:P&C<a-h/qcGmCST-,7STG#X?/.kZ''$3NkO\X70-;d=<#qj%AM'SLbP0mek),DTB8QR[49IK'MP:S!4,a[Rj7#FZ8%WG!cIMPh)dA1Ej:Vs"hY.\t]2Qf?I^RS6ZEBKDH>V\A<*3gEI<kqnSVUtISkk$9f0P;G]uknkG='6KC4d:o&H)7i)>1e7-G_2o)E%7%"l*B+dn$8MOq6Af.D\YRJSA"en6tW'[j&/&VgP6IJk)("*8s^_@+Z[_NW&Q=*:M@\[auNO&pLaem]I9=#%2?s/e*H&gfRNoHd<%N/M``0$0s"1e2Tq=5[2@j*2@N"3JG_n1bt$`^?Bo1_590:cH_j]^$P*_.ndcK.N(godJj?G*rcGoha\b2Ap;TBY/B(D)'tg+^^8>%DTlD06+7nYX+A;YY9/$+*dXm'[iU!h!%c0_EES0LPn7&U!=/a&\4d%A-ji4'qC`<6!PUkG?jNEd0V$KoO:@XDDZL(S*t#dq#'u:.%9*(BB^ag6Yi#2k$n.2>:PpTDU'X/=N"pP/;JCRI7Qk"`Nlpi9@KAhX'9EYAi&P4)T7LJgqJ4GVh2+(gE?busK)i*AU3J2keR8"<-%i*lD33?SUCB+P@l"GR[;!5p.C"XXSN6\,5gWf-Hk:)rI/i-Ci4TcO9cLl`m<?316@U_H3/6lq!oZt#%"&`l8S@@1FVJKH#K5Vra%%W]M7hs$]5h.1gR;'dKG8a?9dV%jMJR!3n2:H3cp6.2%EX&q_V8o*QfTW*kKQ_Zph^A-&PCRUBisC+5Nh5dUn)6'XrK-A"^a#W+>G%IY(h?9EcSlEC%64+`>(X#,5P?6-W4CrC7El"[Jo:,_<a^=LpcDK91`*L\ZN=K)/#G6GOp5Gn:.r736\;(_LQf8e2I]09A_6[l+`2%@d%7FjnUT[aNRnbS1Tl;+pd96_tQun@@+E!Z"`?4mX?nrMhVWZfJh%[W)#<f`;_]3s4=WWqM[rEEU^m*T*"pEpkOSGXNHWJij$cp%C':P'5;;,k@e9b$PK38(cQV/!lG>$9`BV]_+:7uH;h..*"8i=Cd16X#LNO&(*uri<=Ab:W#>IeHKaC+h8cJg4J-Y9Cprm2)M_lg4%qamUCJ6V4B)9sZ0!Kgot0#7(JGG.2EZ3n+E!r@to5;715"R$)d!,N,@!J)_.4c!'A!UD83K4+&m%oO4V$Sr4a;'HG!-2e(s^gIh+%ZoWh^2,_13&Ej@e]dWl2M8N^a"[YT'+Bs[!LgdfSLb'Ir-(CJ_2F!?*67,5Y6HBR,L'X1kaV]Rh63bOXgEaljZ+,jRCn%YOdd&\%%kpmG'AF]l1PEPa\heC69I(P4NX*)/UDMeAojjanHY>d%Zb09XOWme0hF'*f-/@HuYXDoee83@20P:W"g)G=HN93r%M)i<Va$WmFf%'aU$3b>K>'&<\(9M[YM4KuO1W`.AT=i]n\B^uJe;URoK#S\S_T`FDQNn;+Ap,Sg%s+hJ5Klo&ggb<X8=6:,i1OJ>(^5!hR/%oP%5%3Jbe;!?jN."kb%amQa,4"=Vq2i+*@KQE@o4qkK>1G@@h=N'8K@qkS&oUQV1g<h>R.Hs3uHES7X]Z;G7GK:YP=DGmq);9=i./'c9Q%4=se+psO*pZI(;G#!4+Ml^2Le$(#J)Oc?5Lo:1n:1SpIMNDVS>0;/t];Ym1D]7dkjDA%l-kqb=E,=eF=j3Jn$lj7/^"P%m>O:'$;%l1@7Mk#dM&r_=fW$(u419L&IHoIp2g"b2!=Q[^*q%W2b_hM?e:rr2.'rmB4Q;Epo@%a*uk@IZc[q7QQDN,-.o?()TWjVg<OiVDB@%3!jVP+TF6\.SONi6C$'MJeY$m-5XR,kR'bB@H=MkPZ,<F'oeF9W4lj)4'g6%4IfS(LVM1N,3-]>Pje6M8aGZZ?g%j9@ReWkhs%b9%d]j"+Tdu@d)Hih_V\FPuEQ\ck/;7:7o#<>YV'fqnEW5E'R(4Emj2p1gr8AdYo$QJ(8:0F+2%gCNY"3C`RLTM_.<0=i;UuM2>Ur-Z%0(N-&;7WU-.oL'^,mRT)6%fu!n?9"V(\kGH(s_"Y1f*&ln!Cst4!o](85*mW)L#CppO@r:4A[`;l7gnOFepr05`RN1Q+"kNXW*BZ%EuD]oFPr.mbBJA(i"(M5!E?B&;<b!^E(1i&_#I.(Ip"h&N(Yg#EVU"<F'L.Za^6=RB([rs(M2`7/6B$?a:$aR5.o/pVOiRkQA/Z>%A>FFG7,4M,RNb=5-)C5pZ<bI2&0VB<.P:/55YO/?,:@@uO$](';DPDMM:C"-IVXj4XBplOfC2mH:_JGH%M:&d=m_2OB669[N#a(K%*AQl76AS%S.P:-_7nbm[+=D'&7j;]5Uh"k,-IPEuqQ42/10'\p`+P9-p0)X/PZO`SY,?rHU\\jHHYM[fU$j/0g-^;gPektuZCG6)%@O(tNabcM7,KkUlUua/VcpVV_;Q#qK.YG()A[(guU>bh#_:87;3aYIrKI*B?':.(m=MqMc+r)t/fk=!]7^UW5lChY[P6P"g7%(DR%l#[6/hb[P,TM0kaiuE`086mT;VVt^rE3R4/eS,@RcqdT_3)=[\=i8b>M$cCJ;')cZ6)%RBk=H<jK#_'Hk)u^Eo]p7MR]$c[ek*P9%+q:)JR:CEKQ8HfO/.71m8EhJ[Ei-hcZEQYTQ3Fs6^t"MOqY=s-*(Ub1TH3C'T)Q6f6;uB$e3lN7#+JlbUoGU1Wc&nN<>dY*Ns.jG%^#&D"9l5q\=:MsZP-N`#<C<T["E@A4_Eb)/;CN@G#rTpWebU0IeB]^eF`(oAN(k-aRW_'KBe/#4N;ZTGg.FT(VB&O!RoW*O'2`D;%N'5ROC.>12b,l/K8uQa\l(&<L:>O,=FYhA-GW96D?K:!^(f[(r`_7Z%U`Xp5LHAtlI55;'UF[=kLk/HH0'`BD*MIIOr>[_l;k8cG%%Yp?Bbrf6B\:\).nGFB[q@ZV)Kiplh8eAI'#[\Xsk1]$E-$V:8P.:-BM$&p&*_C]c:c896r&%HLqpM3ZR;c^>1u"J.>b7"4neknO%oP&h7'Xkr0V9_prjkE@.^`Rqo?+DLSjl!bED/$_67`-qp#bbU8Lt)A7Wd?qRTE!F[0'!)uK?,@G\ak"Emo4`STgc4t7_qW_\%4j"%mKAX+&b&jp*44Ee['tMXha#-[3Xu+Q>f`pV3a[MJ=%&`LcpV\-"^?%]]Y0[W6A,&1d+F]/XG([fBM/15&$4eDX\t,7Yp\#`*R?o1%(ql'>.'0,1qO\c4V%:T)^^i2M3U7a-iU"=eF/TU8-fVY4'L:PA>]2>am!.&%@*B;[ho@3`09!b%S9045Y'p>iPHbi=rYPI/;#_o>%?is^(h`P$]124/bZejU>CDLkI*-D10@K(49C6OA(&MQ'4^TpWrRC=J>_0&68L">b.8(,X]gqWQROhn$s?(LfCX>>>:](7T0%ZtH2%*+L8e?e-HiG[mqk"9d)Vm8c=]VP;34[W,3$2g25bR=fE[(4($."):&<#8(Q'q=!R:Ylk"PQ50nXs2PT9riFA9Lt?/Zco6X%48P*c%&!fcqN#Y#0\&SA8X"PGl-I]q5-bB),MC?[OnLrjo0)RLii4=PdX$%:0k-@`T`8f8?Z@VX69:WI=/[9ZL6"'-`nj$0e3nof'V`/d$%[_7n6[/DLd?'J4nYUugt^p\(6@)7iA<^dffT8TiACtaJ\mJI@:%CueN_1.."0I^g6+&#m;6%k#g`=V&<V'8cg:c'LKFLRW5(\<:V%(.'/TrdtS"W).c-]_KW22o=q)jpbd2r"W?q(dP(O>_&CR3'^YOph($7quhiA,9W=8h-Y&QmU.ct2#*r9q.AV8"64qI=:F?tRc$[p%,nt>"cHD/B.\,s&#@SX\Xl3ZbqeFWLrQ&eM-le_b\nXo*?QRRPq..T170#4:M`BoP.2Hp.csK+P%MI6.%9qkQEMurF!JVc)p;%`G%R^80`\N'BsoNfiZmL0>!O@YVGq<%aOegFss2l=`nTDU!k;j88m)2237*&Moj716)JK<k!50[sg!+8W:k&n0RG)`)B](:s-WLsPb(%(B.T@[^KkeOQ2L_0V&%mQW<4!<U"iUf?;=%iA&bX&LY9.:fq)1nMTNXkt@HY>[_o28VG[&)Uc8L.OZJlp1.lpTi[eAfG1teq*'Vi%:?J$.<i8qc2%UA)/'c"0RS+`o(lG`@j2l]%",Yuk6Ai_*Aucn.(0le[2FYD9!7fM?Uarf*s"b+b/qmHq:gc'G/o1m=ltY`X<qX//%!1IHa$V\PoRHDqV?/(ZM;UkhZgnH&rXB")9/VI7u;-u'r2_V\8W(]^1.ZO?%;27Il*EUEuba6'-=0%8)3ETMCOR1oY[C-Y9DN5B8%CWkr(Sjg2pd"f10fD<YD"#L6a[A0=4<@aM<dMpNM1XKHD3eiN6LJtH:=__D%.?fXK^b(f,-rY<`7mCFhTlN'UotjU3i4-:q#"T4r%cR2Z3A^O?p9*SK4#5oZdoi+"$Y+aQ8kp=jib-"QX*.(X#]7TF9\5'P23U&L@Yr,lAQDj!]4SHV$2mI.$eF^\l#k!LR"t`YUFgrso%OM@IqqotB\0)RkHcNj'8+U)I'&=XkS=`)6MTd=-:1+W(9XAh^VL?F3JdWIF:6)`#/di$KoG%IPgNagqkeXBI=2&*oW3@lP!2B"sY%\>WE\M:bmEKT\nNBf^!$afkC8Qqh7Go`Bn@_:VPu-K9Mc/XNgo2\?YM`C>G@6SZ5q/)08u\FjDJ]/cG+f1[>e;H8,,1'_i6j!p]7%mD42"Rd/.o<GC6HekCD36.(N=m:OpY=fs@>Qe)u=$F<$JCrbu.<".fsF,a)8Kt]gGc%L4c&f:H"=YXbGD,"TA6Lh<I%oc6sT`+<[%.tZFh/K?tHSiVfZ"I2QH.P<,.5f`c(R#?2=MW!!"bA6GJ8VNqhqU/#`6/!#PN<M?lc_@A(Dt13F7UBYrR>sU&]$a?C2/3d3fgc.N%q+r\$ST_,>7)e4&QfY;!KHb*<%aA$H$t[h6&B'jhlItBsnk($uJa8]2!9SPTSbArC(:)-=(P99G9&TjdF.$P\N8^+g$:'TYju*PP%S\ZVt"B:k(h-j9'p+r(f"s*`rBg(N2J-tM0p?ubE7ORS:HDdXITFb2(*Sfo-!%WmS\P*n&,LA_OkWg5[/6n[%P2B0qOn^LW3Frr(%/DlR&0TejSZbfgU<b0Y?9M&NLVC]p?[+Q.'Yl`(C']_C!]f(r2,di>@=Hh'78cObtC?FVc0ZM3RA?!go?Uj;O]j)&&$g^LfJ$tGg%1P:>V:gs/1o*gCcE@$%7Ta9bAJW)p2.V4bJ_O?QUWMbQ^##hH![2?<lXhet90;,t1Npq^Oq6g3u;O@]_C'\\KN]f8p,ZAmWpK6,Z%FZgRc2'VJ\28,eaPZ^[tnM3;<Q>TLt;IdE5YA,gf._Y.<HM&jMaX=h?[quZs3a5gc8_4HTf_Tf5DQ^^]))G@Oh1V-Yc&Gl*HYERW%U,SW!nn'YKFM>]882+POH#dTS]6^?oed_tc_4%>X7r=a$G5YC)?3&/Y5KW6N@!%#V%e`=W^H4!'Kq2?ci%MJ]YiKhAi3)?>m)1"Z%lH=<FWt8Ro]nTpYVGU[0_lc*4N!K(T4V<1d9,D`WpDCM!P3&2-gQG`IS#0%h@o.cP]KWg3;YJroCfr4"!=`3BXcmCSi5'Y4<3-eQ%M\qe7K"O.<=OFO_>[8\mX!IE2/6tIF-<0PRlC(.:8++cn]&:-[.B1UL72FSA`LGFCC]%"!2%7Kj5,jb?,sR[BjjbBdNkA-?l'-S@%c)Zs)gR?C8K?`_)mActa_aeph8\6jHN_j);*Df)je^EhaSf-<colu$f,R/!T6>.L!P\2UBJbC&D)Ul+2j^fpe6G6ZH2M*;qSd6A"%BE"erpA1f<j8Du8cMoZg^=^E\kBX?F-+[5&iu-m<fur'Ea+'Bk-bMP16Kl,k>WfG>">u^il2*MKcY'+nl,7XPo^)/06D+/Y<sJ&'%B68"\i1n?[r_.e(r-(P92n1)04>6H>7NqKNViMASN.6(Xi#;FST/;o""Q<j]kL544@CB!YID_<ScHiAZfIV>RKt^f>c(e$jg46!n%&RRaEh_C`^c`G<RO,2UPf3iL!fS]`P8XF4bFd\JggP\YVR1L37F&L<;FDuPQQ+p)?c;UQE,KrrT@um/TqFn->I'_+jd:XI?@k]e'%;h&Zl%?s0_lM0_0%578_cq<m%UR>djaU7L=4q6WI3jb7@:&Q>C^R?hJhd&JBk>9LTJdpUcj[:iC%L=P(36a[Ze;gBB,Z/:GrjfMW%"lF2B/e=-O;MT9UT9Ho9AnQ7Z3-\#VU$mqp=j2:[R&0TR,P=7rnKt9QBcugrq!V\&C8N%3]2*g2Do=1CNgA.Yb\_*<"4TH1>b5nF%Q7BmP^Y*Q#_XAk`hBokgkc=K%o3+"i[$Z6%B.i)ZVN&;3hj/8WBYLQ)M]5A!Y)=@m7WWI>3$US\H(u,F20MN%:3DO_/#_.S8an';%elQNAroIpd1cb.sA,b(FNp<,.oT4Q`*Bd)OAXCH=Y6<0Vk:ITH*$()/s-Z<Nc$+d.h:?\-\ib#>7<d$M?@C<t)_IAS\j`Bn,5$=i%s29n[Vf\D4*Rfc<\i>JZTOtOM;=ufA014.uNJ<#h;(<6<gh>g17+Z*755LZ3)MM4VAj=5CYArBmd<mI,jGum]7c,j_n#[K[*CkP2%=-pt?Y;u@3m-%*P2fH',n=T_%O32'o#-u.j\ZSfbMC_At(XMn=o1!67-GcU:>LQ%Pq0qo0IRN"[2+m@VD`l69o=cQ34?qkqJlSQt%U)<fU1iK`lcmODufi/o5Gr,r$*sF=Y7[kQnNklO@Z*RN2;==+4?YT-m8!K2\&iH+61g1M=0OO6P+UXYa6MeE^?_1I;N@'[K5@+9E%W_o(l3IOQ$NC$u/c!LB]o&&Ho]kO7Llq,^4d;,Ek,qKs_$%XAR55^2uID%6>[kH'VT4t']-f_pPUU@;jB3T3e=_)BU7H3i`RPSlh%*;)G`q:qB`UXQ82b=5d/a,f6=go@Q%7-!9q2/i-LSGRQ7^:fpmqKDUSWAY+DZJ+Yh1Z%4F)LY<lDmNln][>L&l0'ajMOHC0j771-%)I)o8o[Eq[Maj0H"?.0'R5UMF%3<%OD]oT/NJ:^[]iJ<a,X:?ZgJP_'deKHXX]+"'F`Qn#XnK+qI%Fq`eEFHG;3qNfrVff]INkM)%F>iZ\ac4S!!kOu7?X#14WDTNa?EPcpTK%9XGG@Y!.pejLPqGEr?ZW#/'p]=C;PP&hF\$.DK@AJTA8.dYRDQAc..d\34Vl";H]4D)%FH)/%/PHlSAYQb*BCYGLChYLWeZb(ILD/XQNZ3]"(Kqo;<ME(rhY0T2ZFM;XRoOM$B_D"U."-CW\u/`V&#tuh>.b;Si!gB2^IIu6%P.IQJ'_tUmT?_m`L09o]IiU^U5#5331U!*?;q1(1VtJNBf)*RPA&d[gjaHQ!^0M5-0.?.amCQ\*pJg6Vioog7dk4e9SLSnX\VHUF%[!2)1f%'^1(b![DO$(W'3;1_5Wf8U&5I,h^dIM"hduLr?T>%V!1PK<ccTaS]a^`N'^ZUkran"]B,K3W):UM/]rUB"=<c:@9C,Tu*%oSSNs5?U0mGrju/X_d[clh4Z!Sm">>kaT"gq=KQU3$bUd7_>X0J&^L8G_tA(:6e"UHs,:S5eT4jOIm<*3W6$1eN\ti[.\brG`Pfr%<=7mrU!l>;5(.o2oY9Z>5=V99Vb>'$Z5PneJA:;YbecQ1#6MZn;uX&r:o!?!:BN*r\pi+fE@p_"'4</ngQh6!:U$/.O=BoU<bCdK%lR_91ZM+fPnF=3S%XrNcDVpA%Jc;["#lYNC*d?iE,AmntRshjdXegR963-#oa\UnURI90'Vj(DB/)O8&a8E?1cVDSLp*t"q=1[N7%d1c3oK_-[@8=c8N+L5C/;\"S2,o"_=-sSZp<6LtK/+'"bH)C)Z<6)t`,_TUnj80qQ)SsJfjP1ElEb\qo8'^r4YupSRs5p-431Beb%ckgZCmfk^&#;m]hhJq&3PKS-ZYEV-fnV,h".WTSV,iReJ&Y4:j7Zh-PK5p8>,UjmKe<$i^A"L2fa%dqS6-0XnQK+2fY"Tfn@lN1a%kI26FS@/<Pk<uj+a3@2Z\2;#*HLgsk2]ECEn)@ogSiC9TA,\D7j;mfnYY(K5E<Lc^X6>@,j'jb^Z!6qNNd%bjLEkf9`sJlGA5-C8%HLu$s]2WK5<4'SP):O[kmq?BQY90;Ha)MX&-K8P">4C\lWi.g#K;2+ZV1CmL<Q6d46HGAc456gB;+,F5FY0NbPRKa;+l'#dLCk?M%!jUh.#*"4Ym%@4$o[RP"7l<)jF/[J8AdgsWnm@*SfE\8S*6n((bB5<-KT]C&0=XbUG`od>[.lM*ff]F5M-gZsSn,9U=$bM.CAIcK%r<5L^:\k^f%fYsOMbFQjr6k6ADs!QO!GZDJLr(k6oD-nfSa"Rnf[;/[+5-Asl%c#ij;/A_FD^4WGqO4]OfQ1_r!(FshMH'kHt6*'%mC:>3DDTYY7(rfT,Q.[(BL#R_`%nKK(7.C?]>:3e"2EP!G-r81bqIRek4?'Fd2:FLidP1)/]fdrXrT*^&LZ\)FQB"HP;dPL*0sAG%Q*+\RY>SCY/f]'OIbdZQPqk9jGGSFkG8S2to%ljrjA7.?.:]uK7^4^86JP'Ekt'5`M(@r45,QWS`J4eZ9BjnUrM!%>LeC.Yjg)1l%UAHDH./q)X!9nLpmRiVOfk=(#;s'PsaE7>A+3d"p+3s29"3rsTKi.MfP[C[oGs^MD_92UAk#7eX>oji]ChU$3>^ZM#0b>o,.LS1F%+Sa()%N+DM3^G),o:3PKP(BonOhBilNHW'+UG[[&4cbHaHbklcfN)0sR7$T\f.(B$W/B25eFL;lk]<qOF5:NKVic'i2cf5Z]NQQ0%pZOMo^0-HdYLXAF=B)RCrHBl?S@pPYN7H=4fiXqm^Cp7_j'om1MbNeU59+/8%`d!JksMMSTeo'QN$K(]^Q'^1;L!8GQ5XA#.#;#q%47`c@6su0cmTU>^$(Rti`)7=T=`Y"'hA7,kGu\"tc<m*S>[?o*RD$!cZaW[-g@rRsNo\g(<A)fCW8?&4Y#/M/1TBo]a'CbF29!YH%4J3p;dcNS'3\691RX+'hRCdnuN0`'H,ai<dhGAB)\fq`$a5Pj"ES9l].W)/rpB75B@f>u399@A5T+0[B"P#X@\7MW*6!S?X*G@HM%?_GE:g%lUg`"9S2)_^M)2)i\1>0kI-7Vfc`jk6ZR[+g^]H.G10=tqP,/Y_V2eQU/a,eVK`bLb-ja!H/Hmr:p'LC[UL91kF"WLZ\7%Jl#jT96Ik((:pqYFQg2;X!l4rOtth3a2uWUE+Q6q$"pNq-EJIsa!W/R/!k%T7V4\iV)&VtO,G62O'()Dd6EquF;afOX;Jg0226(!%mO5S5^K_6W@EHHI[>^)?c(#5R`K2?!:LAFWF+),<55Ol/6aQb@]*Pj,Vtn=%"rsrVT/@VC+F%5=Z0%a(*umA7RAh76q6GsWbWU%Z%L15#4&P6"X1(^j%N,23dF6`>_LJMN.74$(;fmp"3-f3'^I!oSjoCkm)DY8=L65!YKXtDim/!]8D*l[3P4&!?4g.^HU=dlYJf>!9M%>_=!o^*L9;/T/HK*:FUt[JOmKnR`,9?.A[uWK*7eZR'lI`6E.h&illNf^c`#4cZ@:%C.kE;144Z@J8:."Y9:)&"N!+1sc_c#G$6W%Fq@eJW'tfLiFD%GeUu'(pjO(^)[@h!V2j/S8sa-][%/%i*"_IrD`#Gb0[MS/L3@]#P8FtjULEP:>``$UE(1`Dm=XmY#:VKrP>k'E%39**W-&&4%I8akhlYZ7e.C@J;T%dp#XDJSeD$o[Q5mkj[a3q`@/h&V;Y/Hm;9VQBgY<jL'FX.".[`Rh98XlO&V"holW;&hrA!:/S%1k&>-H"@aL=A"m)5#0sREi3&.]Z=(7GR4uK^2XbT)G*!Q0K3R0]a"j+1.HZG%+FipI>1Dfa.1.p:ug;^\TTaQcnDI(O<e%4Q0?1S%`oh0>r*HH.X>oA"(WT59Y^,*RDRNh5GkA>e.7rfB>D9$4am[^H$33VS416ecHnr_=VBi_'Ggn5gkVel69?Ar"]WG8:O8p;4/Ni['%g-ub-A\1oGXGf^<D-#H2%S:uJ!-H9Rrm<@A<_0G>)gE1-EB9i`b[t9X>t83[IhCG0(Q\6Y/_R"(Gt19uIJZhE=>mOs4?42369h1C%3M"#>Rn8Qnd;KH"\!Ab`@:=OFlas5O]Ti`6G3u&,Isq@)FIP#*C1H#;S;ds5;dHlf,fuFuK%$1M-D8_:b&j'$BV@2X)D0MIf25Yn%Y2kgJdi(3FJc&6Wjb>52#8qrIgMBct*:A9#HIuf*?^i3)F@VjWZfBO^-iiW'3/]>R/rujHK.+*5+'_qdZ.2V\>;#Xh@PL8M^mO*9%,()__OUX?X8%._*b"V6D^-#/6=nC7g=MUkNFK(PUKk"?#M:gruQ,g^A!gCt7ED^""G'S0;a2fq<\$,lK3JRYu\.fDJjK5LqF1Ui8%jlpd2]*NpVVn70(cQ'U`k#J$?h3)W@6-P(qDQmpoo8%Sg1Yna.fQ%@\koc_UiP&i=rQ=5:`+L1682Y:repq=Jc"_lAQ9g3.XNbeO%Y\Xt+Cp^87WNi:&2VJt?S(t2M7\d_D-GnIf",/Hc$B;*\[_g_Mgam5BX&k,bmE$og%WB5]acIXM=D*q.<]Zk#YJ4;1AQ'HSmFs1E%:,^kQ[4ela+_%d::hdrJ>Y$A*eWrtS1>[6F@^ckKQp3u4bc0-1`MY*>c@44ja_S.%a\mb?LjQW.:]%Tt+/38WDm_r2]2o"BG@HVq%38-;*g,'GO*b=<.-8Wb`WC(-5-:.KFkJ$1E=(IH\G.L^&k,CpVAc8&-Z@4D>PAcl^CX6h'Icaj+%=QVRJ3nKF>=hoeA&+J(_gSBs%J^!ln4,<4PMEp.Ug9oD_(TSi%Xo()J>@_N!Cj!8>Y7`hIU*T1O5hq:M3nPC?/R[KAAO#p[Rk<0g?o!B/i"KB(5#(8<EVl12V'^E0%2%,[FQKMgVZbALXY'qMc2!5@rd<Bfu.a;D[2#=9;%XriXdB>8#N^lq3!leH>'-qU3p$HDAj#W0X%dFFW0UYYD<BDl*I^+P=XN)\N%q\)"Y39h@CU'.^'Pj/u90T16W4.A5,DI7GO:gT4(FEqJtgP^E$Zn+kq;O%OHW*D2Yd?ScubY!bNcZ$rkNDM5p3[b5]3TT(ge-P0I%&SL4>odu[-"\MObNbU,Vistra%&Gg-Xg#+j//+C&VhI!i2tllD?Cjq8"*n/n,=_RWk5`R26UEg75mMG`dCj-VN"pVpUSH_bimf(Q%rF/><b$/UM@mi="O5MDY\c^s)A`9\jmT$J<:N-MiY!/s8:<"Llh!Ib^_9f3ts0]dFFVn]Z`pKJI1,/Rs9Kgp=,;aQZT+&.O*a@nm%3cE)RUH16C^EPNbV\[ENq$c_+aYY.+P8I)2q:oBWK^+$E!iOj.I7IU#i4Ht%cG<DF@pC(m*bp-Ig3>5b0OX:_Y67QR/lL>$nW'\k%+KUE,B9md&[IiaM476VrV#f!-!#9=0)HG37^p3:J>:%S1j&P)DWb[+L#h3ShCcT<uJ;1>]^sAI&>kY+(o70Kf6a@Rba/6I<T?qu#%V:3hZ3.n,:SSSg?7OnNE#j*JNVr)F73^opI\qB;kb9t&#:A.mQAt\8JESZ(:YT(k)BNPXaK&g*jqK@N^=i3MOBUWp<&jae#fLhoY%%elmbH#/0QBEmi<ZU8!$N(qsZH99ViQ-M8AD/5KbKgBN9M/q,TV'X/K8,GV>6cc3u03c;RD>%eU4H>9P@:RstmM1Ou[.<X<Um:$Y%#8tK<fsN,G2X:m0@p>gMgXO/Vp@>fJCV>MAR>u)^#.1E;O'N\UUpQm$0UTc%NTh?'Dhd$"--(tN4Y>N>T8THaZcSXSo!\-BO%#qM%>BGVXEMV]8?b/[1=N7X%V_H5X<BBql-jQ?uRMmbQld9?82lP,dDn.n::aBp2[6JA(#igZuKl1.Sp1MEc=[b(5@pD]4em6>8p*:ce%AFT.0G]UO'@G,BWZng@9Yf&%R_D5t[<`\RY9e<^Z/(_S)Zru]hT\kbP<u[ZN"fufh0[L_=U.hbY+e52)=rG3*k(,P<^fq\nq739\%]$sR'>RpTV[)0EbZ"aP)/Ffb+'V&be.4BHXT@Ec$>'VT7*^$W3YFJrZ4%$daa,E*f\)Z+%eYAZgW]t)A$o;Nsg-Cfb7P8O!,?p>,%/dSUMf/hiR,FG:M#uS,M,Y[35bHl*516Z.qN.[(Jh,`uY&&jf7a5">PqYEnpp-H2;D@k"DpSDlket+8?+PC+Me7j@aS-/=9ER"b^%b4Ia"Hr-T/S$OH_2XJ#KhW@!L-S.7E/ljR8XMQTbnR\6l>!7RO<C/9<VCsl0&!@I0%^^&.^[3%OK8s"q-&h]Wbb!KB:c#r>SNQ/,%JT`KL-#14n@a*2ejOMJspUDtOTl$Fd"g?csaQuo%4#%iUdFE[g.pAb<*qr&lO#*ToJ:m7::V\^*J1NdB3T#%cre*WA41<sMitMf:%O[@fAY;INGF:[Y_P0?Z_5t!_#B0+_GKh`oompZNDVU[<$VnadZCM!/J5scT/)KrLEF)AMb[N10iFL(GljZ(P<)O(#]7%><P?oIl1%lb+DRY17X3c5cF8g&CAZ#1)/r-j4h1,pI)^fk*j>aYlVhP?[DK[+Q3kA];f$,M;[<N^>F&YsN\9.h<X&<&^GZ)#n'ZFW&7.3rp<^%5iF2j!q$LE=u4o7Cjg2^4\W4<g='cOLi)t,c>:D/4rE_$(g[N]CpMmEi[ct!rqSK7V:b?T.#dgWK\9SQfKQF@KH3!(IlKD,aqdbu%Hj`,24;$!6SiO^Y3Br)Q>;/2R`tW+FkQHL?QZ<Lt=?1`T'#>&83aKf`X\[B2AdEQ7@"%5a!iR#X=D$#g%bt<Ho5:i1!LZNW^j^(j%L,1(\LMM*$`^ZqJKQ\q#S448(:4GT$BZ#[h>FjK$fXC1@/\5$m_j:fMcE1%QaMt73Zh>pO]D_u(*`-<Y?dK:Ph=7".);B,hfNrJ?%bdX<*X]KeV4A*9ghTGZ)DV8,JqN"iugp-'9F)%":h?jVRn2:F4nI#\SS]9*<FqGEHhn<OA2RAA%Q>En>'#Eh8)_;r:GUfcnXmT$)%@,l[*%4*129hkiIQ<?rm^XMOG[6#MIC^Z;Vj!R]P)At=ebO]jgq=W@==a%0Q'8;<*D3NC]R)\"-EpN3^RWU=\HT76%+edMUA`m^*%+gsBo,gb[)2%3jKO')\?=IS@-1*d^Lm(b0a*)4/uiQ[rhT#Ak,[ol1fD_T?m4,::&bBQ7<C6k!+TgaDomFNn=Lj7G#gD<AHLhMJc%j"jDrX[Yn-OIrOT5e4?&o]TTJI`CP-L$$VI"-#N?NgY$GqaA'F2b&8M5aG-m+?#@l`Ji.<_AhGt>u"8S[].i#qcoK`ACCVgg,&&r%*s/`/c2'H22Z]US]6<G>[9H5IEoRH%D:mXRdr>ON5LqaG=g:n/Z+9>PkLq]sBgnB5'$fc]-au4@^gc^f:ELOIG@ATTjBgSQXu8+@%+SuZ>r6EQQWYs(qeL5i1ag[XGnp6N.&F@#H;TP<aqGM(crG`HYVJ?Gn?$;!$Tb#V1W__r&6G9=$G>7aNI=K!J<U6fe<rK;:?<"$W%LNc,Qs.X8a2:W35ZHYhglhdukMlLpO<3(H#lUB>b+Kru[7kUgm>uQ_X2?*ap<U5H^rL&SDFi:gQJ)m?h<T<FJnAtL=W#@bk.RmQ,%VX4,QC>Cbt)rH\Cm%S7dgTgL$;71:%7XK1!*\XO"%@X:V(>JARCAVibdZ1rQ?W=-P%`Mm=TRuR)0A'QLHk5[X(KKe0n#r=^ZF>al%2;L\-RQY,):TSOrlh4QNE)F%-I`oE3<,I=_EI:WkA&tstR9_n2ZgHmpe,>Ro?W?D,O6lY9C.A\sDYeO@-T2,hQj(/mE4/4`D[XlL%B>t9<H^EJ)A9bP8E7F-dnMTh&D>&tXCOp+%S@ol^S8N;N4.kC24PT,#k\fm+#N4sn:H(/HZYf:]R_9'__m:A6Z`R&<)o/d#bhfb+%1hZ=E9otFj_m<(=JKC=uZ0u/>,=(Y3foh*C$(gMaS@otRjW#)JhO;&W.bb<%D.PCYp"A4NmDqf*Tho7<[Y8@`c[lmN[Y56u#s?rC%3.%]GEH]Ij-KAPGce`nO[Xr-R!,(cl#'Od$[dN4BD;a(W==L@Sm0(aY^e,jFD.@h!"'1lL/2l'm[btsN(>B.em/WYn04VFu@g?C"%fC&.pAcJjJfg_e,rm!E#_:a1nQih<96]Q"%H<^2!gV^@W,T1c"fqE2`,h1nfju"D-%sCHf[KD]:YR)8cZQ4S&:%!:6"4(<@WSeV=%m5!H1DW]aAH?Zg@a:;u6X/!;5c![G]lc@f7ZhK$WSKBl'JUQ^nZ`t%Iq,T,GGA$5cVd">sg"k?I@H6W:-1fltD%2l-]<`NLhQZ%r%fbS4CY/*tRW-'crfA)A"<F4#BXNn5_B5bgU4Yk;@cbJ<[EekRAg"3\\`449e_n.)3c&om?7Z?fr<[N13\9!\t!aO3GG4Of-j'/9=%2F<AW,4"uT=^.Ic6!c/B*+BoD!ar<5\S&i?Z7jti9Bd-F^<Oc-Rj5r)T0on;`:t\V/[n6/DfeY7eqe<5]`1J5j1?Q%SKPomj",@?%N3D,#\hD"3UV3Ea,K?(t/("7X&EEJZ^CS8mbN!R@mXuG/iKF0O@XL+>P#K</K9I_WJ/Hn\fUkNi4-?f(&`_#^iWq@>k7H\N\?k$5%0s:$urubbjh^rM_kP=P%EK^gQ+$beN0iic.1%$m(fF9RLkmb2X+i[6]$%#1$n):X!#DdB_p15&Y\;?.^TkX?CaMs$Uksi,SGPCNc%(jC7!/g]:7@N:r;isb1e$Y"LQpgnNb\8p#[Q!3(kL*F:>8&gMf3Q1\.G7&8>(q84=[pR(`g%ia:6]@N'*W9K(ERWCDp5U!A@]]PK%@bfJIll@g@I@(P#o58?^pblcaD2oIB4r\7/LiIO6b)Q_Z3C&NBDp8"jLiFp_gTOc"3a'I]rt2TMrW\It,0"V0ABah@6]=+<mr`9]%pi^h1;oH2:h;8`P>]\o@e"9!d4-%7'6B'+N^cT7\GWWjRPe407idNi)pguH%DMo>jl,t/6N9g%EIg@ds0]Lh!0lD.Zg\qfF2Q*&4%#r+''5Lsr9@./U_\"<Ko6B%BWldm9!2b&SG<g.4j?(O99%Th'#d)mFtL[-Y,Ig@(_TJ(XWLE#d)If^Xn6AUaLs!`'"MWT&,rZ!t(%,u2RBrX!\VM@I$beo-TZ2b2Hf)]e>T=hcIJ>_Qn0I/.:9E4&PVjc?+Q<G]2=4P5(W_mPX%T0nA=f%ou32fuQe%<mCohA.-G.j!@]%3ntlbCe&TW.3<d'kjX+?T@0>tLTdemr\8N)$>h]E?0hq>Y0IH/8,cHNn-sP_mskm,m-+Enk]!RNBtrkN'cXjsB;+g4>BKY']ps1;%k+=qpn$8D?*$)2COoGhN>TG0eDN6r5%c<7URr;nAT&$Y$K6on>X4Zo)h'_VE&+_0qiG-#@c*?*PiTfcp7fUf-_q!FUEcT@[d,?H4%gh""EF+<CmFk3[&7eVcN=!b`Mf(+6__c>/oG0e7Dd,A_>RN1\NdG\hgVWTAq#p$2"B,Xq>#p!pB_sA6]^=B`0N"3<;QbB'0=3'Du%Tu67p2Z#aplZT9++`t6:8nd=ITu.='bTB-+X3U4KcFY3Fjk-U[/+pBn.p^c0,F`M2(^\dFpG,P5qYfMNDTK3m3Vk&"5i1Vur0BV)%%:aaCRjFb`5C2MC[""^tHSdLV4HVP.P'QoSYAfqObh4%qI`X%'e!=Lh1n#)<):rl:6bch0nG6F]2FJ^OXLBEWP%9kY!2;Bbj4BG>%C1!kA3/H$h-:Zg+W=.N5^."Q0l1:[a)KtT9&>r0W<7/k;^YJ,LM`%stEs<K8:3S%g-mkip3(n3HB*aAHZ>^9_'@^\$6Q@En9g,=G%LVB,(m[b8jUtopm2Ku_@aEjb.SssO%ZgP!>DVZ@df6=pU?Aj/!fPAA/pY?Z7LRHk#Ap1^AIf7hObq1`3dJpZFKZlO.5-DY1B\'Y7%Ln_rSW>!@<di@`<C?J=Kd`TY]Si;R6mIs'Pck.Z&6#qsfG2D]$jOdf4M'D<YT'f.__Y_%@Z#:Tq[?%HH=',J_a7@l[Qk4Aq,/n)E%jk0Y#(;6Zm=c;Xpo\/Zu_)3$PY$[WR?9A@NeoSdkE?mW6WhZ)Wo+S$q7OJko@@$H;oYg"]T[.9M4`S[t"\m_X[cY6:lWrrOdugHT%ig=4[?/iR)9%E$+:R&2.,J3>nRN'ng]g?<_4C]:3F%-9:a)5qHY2+r`BOtk`>H"ZIE7QQlY$R/L#&(fNAfS_a>n-iQ2$Z)-Y+NDu%kTdOh0'bK.S'gSS(#/0ImZ$-BOuL)Z\%W[V*S+a"i80j_@$PAW9@dhs*?!hAW6o_YG\t+UaG=cNHLL=fhB&R$<bQEHASetWc4Gu5%)lQGkkrIGN=A5aBq6<!C24B)(nB(Lr1Fj$\_gZbaW$`WK:A0?84f*F65'aU^#A-1q'U-_>bCaK034X=^_5S?6P<E>Q:[.5Fj)Ysd%X-<je?B<8ADLGT&lI*Bhh"lK(WPC(`"ppK90aE%:oP?>I:#k%L%PS-"kB$\?:G"M`P2'h=',4W?"7LUL#/QL?&'AoQn`g_BNf]&9%gmA0En/foc6PN!1n%5ekFg&cQD/ql3a_u.A+@^jdEFEciPV?iXc9=4t;;1FbGI-TO\!=4kZ]fRW,8nD@?rDuE(-nC^FpIOF4uB!V%=M1jnbDi(;ZHg1srpIlZ[go#GN\l]9kU:^iF3]Z^\NQ6j\TQQ5agmdqVO<0arS<Z?DB7R:NGEoG9tl>aZg951,/LIl2p3]m/B4g\%a".>!9Mj%sRcVP8Z`Kgk[l)>H?dR4P",.9*Q'!*2o$_ok]YViD>%.1;D9#G%Dm^em];#I:2R3-$ia2#$`Y[N?^SN19p"2)/^25.p%[))UV1(q&9AG\cN'BJHDgd_YD9k;:Yf$EG,emCYsJMkKRZqW.rfJ)X#g6Y-NZX([J%U<D5^>,46>A_+W(I=OMBgpK,<?.nOc1WDc%7XRtVI;(`<.iQs?g"^Ml**Zrdd.N3X*HbV^L"S6;>%Gi^D.pAH:@e<Ua`21+&;E(LL98_OgT5=>4IB01ak\Y]"2hLZLJ5Xl4l)"+%\Sl36St'^e>V+L;G,-pga.:S1NXlpb3ZB2GA7d58Lj\XRmZg$0hC6UD6[RMCe5+NENT]kQUc#Z/Gn0'HJ)6V/7OPVfXHq(onf9M[%\]M^*UFPanmPPFOC\W.(Q(mlbbe$XW#+".PFEgbp-(h;@(C2$e8ql'W"kR-#DZ._)L$`DS?*<e@<CDt<dI,Jt=H.tr)/lm%';slI%_!LAB10LtZ8jY"UHLZ%RI-A;7qqX)Y+$"/O-Si`M`Y%P4);!"Y_UgW/W0MisP!@cC5QC>#qrRBR$ak*Qp9jPi=<j`q^"QP10RP9<%DAJ9T7DJ<OUCcpE2rie>UIlZ`Rg,JUF4!qXSVUbIfR5^k-4pc.r0?q>QTL7ZFPt/_rd-aWB;j/R1RcDH%Ron3"#B"&I4O0a.HYLb%aED$<JgW1r$,59SM;lqDQ71VGIYm(B+s\eTc;/%"_:s,m>#&_og/7kQ"3@0cY?WJYp3rp&(PQX:R&gKGGT1s4Y6,5#(JD'ma9<7M%\E:R1s'V4;#DTK5C-JXmPml2(WTJ8q;G994^jj6!hOAS38B,CO&')FoI[moj2f>f$2Cr$ZL6#-DSu9_N.Q_0'Q!3_#jZ3.<?(T$`%hO=Z?MK.,<8G`HSjQhB'8>q*\9BNR!mmHfkk<fcK<J#QkIYb?0eIb)I?]XF3>@(\j7i+tsbk*KbbN"50]_Q\q\6s%e:04TuKB<$]%:5dP5V-of/D`=\A-`Gud=85DC2.<RumkftlA#5J-O6.LaF[o`MnI'R1lh^u/FhtV@2iT2o0@W$NVd*K#?WhT/N`Or/M"_o!e%%Os%Y.hILST#K%"2$ho^A`Gq[>A]4f:?_GM6;NP7Xo!'pW=<9hhDYfFd1)49"d/a&B,bTRZqI3X2ZghY0.UupL4'uL`R<9XU%K0ZVN7/%^AGF:;o.]$qSGBZQ([p$+g`'\7-q[a5"aWR6,"FdR*j_oMD*>7<dm(SgJX\eT'-<f:?UgtT=t)PBn(Ooa$CA)/`oQKnYdrnU"&Rt%+A_o`]%/lETX-^T;igQ]&hYD!of1@3*ae(dGD0u'1Xr&[Eu-PAbEO)1W%UaAoAa^\f@adDKKXS"p4t%Ve0@]ISt_:<q-:cgU.O<N%IQ):mErLHs`XKm8+]R+s)Tt,3o:,8(<Ve\k`9)UehDb6Ufj<n(%_D0J"/5#*;*@X^pXVkj_u)3GC;d/=m_[RKB9B_26sl#q>[u2f%*Y>O%(!k\uVKd=ST'&?90@u'VoXt<9FV+aSgqMeGA(lZD4iQX]eKU+$QJLb(h:!VBqRVoEGE9Tk[J3L]_-od^nJOCV63t7YZ1ut4%76ha@-Vr\OFP/5dKfr"MUq,(>jWP1"+p2Z.Zf$8.bKJ*]ZZon30CrNC]54*Sr\11(nLnbjXc+g"+m<P4:b@oV:40h'pV";^p*.O!%>j(>6@bJDdkC-bor2Dmt8/u34C0W-R$a"OAQ@_So0hr_IfC4V%NF1i2jurien1(0=#RX\CYs"tHin=)_"esKto,QjVeZaZeqY80&%RE2l0OmFGC5\o=Le"Q*jiWO`6Na^qnptl]*2].^EC0k07-QiiB7j@4^9X3Qg0,>(.[Pu>MdoCUu&)Bc_YudPR03Gim2hDAD6RIq6%r*ntaOH\f<'[tO$^*?!&F@HBA%q"NqX4$c8Kp]<1J*]<T5c(':R;0'!..$06pt_!Gr+i8_d!#Yja^/>c*t8bW`"bJdk0+VKI_%Xu%B)*Ur^C/(Vp2V"[AU>*\>Z+hSCsC/qT<"%+hP*n5UAHE9:#oMe't,Z6k$(ZS`SAtpi]mAZ(+luNaV;IZrd_Ec%%cX=UVbiBJZ(t\%%c_SL%!>p;d<n5U?f0/cY.4hm&,Fq$.Zk/2CpP/c[O#8dC7_9N'i4iYHc:(Fr5Ga>iBJER1tiPHW5m8\@d%"Zpni"O2D3)IU/RX<%e`trmdhsgqn[PC7rRWILY!+#TloLZH83@UpgjNukMnjIV=QhYp%CT?/I39:&^iQ:WZ]Yd+IM%Rc+Z@ckGr,EhaTG?TpT_U%+sup,%*D9m$Lknsj3WB\=bTJjQWWb/FAYuDH"%4r7K"f#+<ci3I]B.TA0N=GnHmPuX*%fTPTVqTHZ@V8Y_c`j%5BsN,\-P,eUk.C4@YUJ#%^!Q5ogd(U.$5&Wa3q6!qno7baC?J7\Z2.@R?_\C//%u_&1;i!\DYr*QB(2DW_#r+5:Io/j'aBkgU8Re_c*ckB>b-eGd?o^-;eu5c%#9/LHbSO<)njf$RHnmq9R9MBjV%[tG9:$NNmfO++^%pVKc3k7,j*728nO?<gmS;jL9RY:dIc4J4GksON8PLmO@9d\BO$@op3!0,r%s'B9SpDjT*?hM5C85Hu8qHrn+n>tk1'43Ym8W/4Y3X""0E1G6L7SWBln)g`T<lfO*;?V/'S+QL%o&<'n-_Po9&(p^H#Tm"JNaqW*%j.0"$E/]8go9&ht)bA"Z3VY+KQ&j.d(\$>e4=,0uWnbFcZO8sFI,?Ng>of37Mj8Yu*T$:X2r:@#FI^e<eObXW)R\KacY(lihLcQd%M.h>Jcj3m.0+a,c\I17SlZgPuZ^n"UXs=fC:%T'2hsF(>*Qha3.^Khgds&b&"ppaj?",OG[UIC0le"#0B6&P=GUd*V(9Ji_@QmVf%^E)ZYj?fL:6p846Q(CBiFDX3Id+?VC'G`mWGPC-i=0CpRr@"5M7N7LHI.usq0R&Eg+&Z\s[eG4VHE;41?OVRQIr1j2JUVn%e[H&+%1Eki%(0)o:0QDqWKS1L5LW\$ZW5&<DB^q9:(uJ[R3&42MI6X6nEh/i[2#':W#W4KT#0Q%YaUih(oq+IeEe4f=3qG93"3_V;@2oHF%$^/AO-BlFC0ESn+LHNWRPIbd\p_6jQpomL?^;)Ter*hu1p/k4Wb?ker$>ug%rfF;>$K#s,^Z_bV!'2bU2.<[`?]Lf]@B/ko3Xf,-%`-h&_@NR8t\_o:@b-SoP5\'^FmW/iokC":gmFq5b$^AOWQcjol0V;5A[<p]LUQ<,65lkNZhu_fHdmLk@RM?nA"/b[:-n`2kj22c'%Y7*1;oAjD\nG0tlZGPeaRK&Y(%J(Iodonpp"I8P$0'SJ\7/n#"Z"o=X"0kWGag8mXA-UGgAeO_$q&/D$O(#ttcZ%PES^(PsPjo2X%_#*=KG^>S\.]4B]n'&WQ#=67JcP9H/64110C8!"mV@(D.\B+SYF!2u3(_jV'.:]m31TdgnRf$&s.&i?!3i+P!1:MtY/,3G]aO6F"%@9V.;@]78)1?cq7=oYWWT3V/t3AU)F:QrWhA<Q.fV?N^W.i5!-7]Q%l9?n`F?d7AU:38_RaN\oF9=LXn-2mFh<YK!cr<iJ-]0j6)%9'4'7]*fe!jGolGiJ$ou'RWpZDPgZ2hb(F3bugsE2DoH#o$;<7llDA:6R!g@YL\`q78)GVZhu*g>=OepPO16;G#ZNfXjE?"o2k"o%/?gnFr(].fVDYq_Wn1Z#[.?b6NgtpOCm+?rI+(s]m<(F.62?_/YQ']\r0N6cb4.%8Ic,'p)7UZ7L_C,J=^B?la\(_lfEMhcO?ZoX%ifDVM;WXNAC.m4?US*HTL2d`Q/W,`dT]Lu6:$1_1bquE)YJc)_p&58Y<Mo\?EWZen7uBO]#9``s&Q1rEGrX]7*X#A:f7e-T&]`;`%Ec7!Od"'/!CP&/?]-p]Aa0$h8;YPsZ^KCTp\e$pC5n%$PPjc0@gMI(o5MYgtDjVQ\K^?>B^[tAeT*ohSps_8PG>S^;e[Vb/)UVMR%O(jhkWbTgWMe9_aiU,B%5'-UbB'q.t!H^*WQ,<74!e%RFFh`eZ=_SJW7ht=VR$'W!&^52N%7pb&%;VRt![3H3M],4?69W"t&mH9&%Hf!\2e*Q:9Re$Z+,Bd6!a%Gu;D,28)pD!Iu[d?7oNc]^"pXGOI7NM,CG0'7r[ASgjApoY7e0Fb>oorW"Tc=>8(jm\T&5>%u#0re`%>Iian?&'S$9dkSKC$Hb[m-4]BbF'iDnF24WXge"s4FKtGJ\)RF06T*WSfWn&dBnD#r$*O[:ntoFNqg=O0ZC5ZTX3<)=TP%65%NN&%-k-!]HJ?X?dKr,S$;@=3iZU&_ArqRi-Ge_U?%VMWIKgkuI%4q^E&S9f9'jS-)\-3ZZc#;YNIpK'jH39VGEM3uM.=!GX*i=fa$j2%%@+cEE'f\?c@LW[pI7qqpfso&:pEC!E(?C+Z4Q>?V6c*pE!po7''?$0FVfZKLlgohUI6fm!14@FODC6IHcWGJhKUu(q_&3p-$Lbh*%_H5a&Ml;K5a'u%r:MP]sYTsQHb"('HoPR,2b)j]jRgt60+Xq>$&r:TfJk6#.fpo#'Me8\t;[+6rC8JNGbL:84V$*gr-Ul);o/iAY%*I+NJ$1GKB4fOG#$jgg[:T1<Zl+>"8*WQ+"RG\a21:P3k,I+b>2K\mZI1a:#DbaZrl+;!#=k@=08+io$%<J#b^3q!_1UGF2*Fs5F%fNPan]#7Rs7^ZmWC7*.QMnJFJ^KN=6;U[?87Xqh$Ao(Hc4elPNk56_h`gtf*dr8tl;I:gA0OJA\1*]Dm>E3eJa3JGc8A]b98HKbc%&4M=*M-<Etik^d'(mdsQg6/8n$Eo2_[uYYEZ&Lfmb^CiGa\3_KCQV6TA`)USQ@:[Pn:\/`oM(d9e^Nk8'5'[n)VN1A+4PGC>HjC9%$&S@)"g$lI9Y&J,o/o+GQU\_L:C=[&@9g+/],Q%fYL5#OnMO<0BNKqrS?GUL(mk1q5"doVg@DAPDhFc?-h?J>,ZG?Ns4hFd:m$0/%Nc2XO3]46BaB:.`U8L^;Eo+VHYccQ1<gO%m]?[E5T@[)43'+bq;=A,(WglKtgP4G57alM!^8t(3Fh3a0j%Ig0\gEGVUR'Ao.,?^A%RU+:oC5^<>hm-F-,^[MA>5kXG01C!GM8UiK4*p`hp;K7BQ]c#[R(^!9nT65[9&KBW:6nJ44*3sdY<:Q9OW8R9M;j60c!CP:>CQ/0%]B:)dn14*U)m:'52,RbRH+Ftda7"<3=T*i$B0L5P"bqq?IBR6YTD23#Y(]e)r9)1E8'^&8l.6Wmk9kC`K8VYPMGpZm.TQ#'gi"S,%*n-goA12E@4rnCZ?oDe13D3\,4d$nCO!o?U-2>q&EIm_@k^;%q>%7@s/%iP;5;NXkRo0I^qI5<u@?N&)feZ8&P(=_>%djX/D]GBi%T8@80s4ck#%@H?c)"0*rU\0tKrX15q:FFBB+rXE]"AX=u#"N_](@P$V8Yea/oi3E,]>%%95X$!_j+eGZ=0JQ\N>&l=bX5/2NHW$b%T;qF_^C1#X`J.\#3.l__XU!'I262hAGY`>$MR7k!8Rs^*Eag5>rVU^bjilYd_WjGJ87(QlRQVo,dQ9eoo3U+BEj\._HT=n+li>],%RkNB`EosFd3.7Q)73@2L/'ktTjW1OXqgHU:*d=!t4S]10C%[2p>QK(I7Ea!&VhO!\<s9leV1lln4-:O>5JI#$<]EZMOK!OlF^K\n%Qc;#^Ma"!pq6=!,KmcH`o&oe$B>8ec>j'UrOpBhEn%0o/B^Oi7CI_Q7.Bh@r"q)?i!G]hFT^;ZTX1+b=d,L[@Pm=KBm^/j)[IAne%^Tc&Q^IhMTW?P,>$SQ2cCM7i?_d:SO1K$nQ3D.>2<ZsYCGJ0Y0SpbX^lg-a/c"4`pagHFX!@$Fs6HrN56`)CN\56)oR="@."f:\A%O_7PF2a\$i*\NiR^ZVrAj0<mQquWToZaL<'=K,/4;>=>M2tEC$],uglRVX8_)DGPHIcsULU>96uoJ6RY;uCo;(A0`'AE)h)>q8[2%F,B!@i0R$l)`1RA[^<9*.Fl-!Q+Vl!]6&rEE9_7[H.L:h.3i_!.%[rZp2f^rakG%Tjb:+-<AT_Ic+9=H])Y0Y#AAHg=\ViL&sBdo%E`\R&;SlqFoN@OJ5snl&*GMhH]ohJ*T<6?g0M0$-.,jtkf@n[pT7=omps8TeS!r-L4&spKL'r(i`UjTs?\S=^n6oG]2B:*3c^*9H%3TNDQT9RIF'2-i1s-FULEfV>t,rb:"GSALP'TujX_H46.a#,C-U8<#eP?&@T]1J\YI\`gaZBTgH+OgF[H=Y0%6LiKlJ^@DoT!J;[%<@ILbH'&,1pYnUBHilnu-DRJ)YNCEE[a"^7(DM3_MC3X=#kN*NR]l;M?IgVSog<u58"$:@n[]RaKl5$@jZck`SNl1`P:A"52`Ak?%%A!2?h+OGF?'9,&`NrC<X`?=HIG?H[K'<2qp3b#?q)aBbU'WHIf@$F\M>Ir:lZC<MK(E>nMbZckk#P,3"c9DWA[\00ANhB!NL]bp%./Gc&A2$NijXaS8;B`8Me^N+lM8@@U<&h!.m@d@"BpJ/hA29Fk[=GrAj/!L6Ulq;>'mSch9)ai%P'8(rIJcFgd1cM.#GN]'Jb,Yl%Bk20^5T=N+afLTl4A*4sGhUo6MmVB'FaZpFZgT&nVWt?fC$k2o&:$br%!.cgl4f:+E>VJG/=_ilH6>W\J)/`7`fEJP,NY8cE*21;%#BjhU[C\$g9`-4u7iO$.q8OeS%kA8fbr[;EPG`9)X_5;R@Nr<kSWBTsBOS_OeNK6Zi0[aog<R#&]L1+q8G"\3B2S+H#DSoIG"Q!S%"*)O\QaMVlURo:G@P&^9OVfY^&$bu;*#u>,(ku\P_>0oU?iPfaM-/i\G53SGo_CGS.ejIqJ!!MpO#,a:i.=QE1^B?fTuENo/9'SB%];&]@Q&T*4\/3Y-_gN">m28h$iHl'jR$bZX.*g_m_AgV%>'Jtfs/>LdrY12jm\Jqk]GS*tIBZY+D9.[k8k,LXbT:2NV2R^XLH"VJ%pZ#Y$c"Ie1OiSYi`^RRnj/dk*kRcZ$SW]1u@<QF!8X^&O]NgPhQeT).2\8Ol5eOcE^0\=`Znc%GkVE7!Q<BP%l?sYKQ"HY@i)XHN%,lafLD@Kb2`p6iHRMJuN90f?m3/g"98ZQGphfA2H"*Q6JP&G^nAOp^'3"Ws-@dNWQ8L41AHj'`ZV.^X\M:iW^90J<N@OSFj/LZ0!%eJ<)oVV/0'$fU#$m2\RJ7o[%=Kn;JWSZh$A:ebRmfGg.ZLaV1Q<jIS[04"If_Vsr.>#[`,hI0m_hH@(@<ji.9-M[i]q+(ct63Q"[%#1A@`$f/Al]hao6NA01fI[68T1e\dBSt,TR[+IM5<):tH'7B3fH@h+/#G4)5Sh?(Vi,e).'<IRLn@<W(M6]:Q_5Gc/P@C!AV-3#]%S8i3-U[AhB\i^bEkHeM)5*qsU6J7%!i?iBRVq6;8[XJlJhQ.Ih%)#4jf5g&UIRbs<#(Oj/]B`[c)bQTFPjP;lLI+qmI[Ui>[DMT"%OQ=0pqgjl%9J&1V<q5%gV*AS+lZ'!oEY*OtEoMA,I_Rj34/5"RUXMe%'[P+ZTJpV.[SV9u>DWdGcI'oa[#:pD6^ce6Nl3Un'9?9$%G\3$n\L<[i5Bgl;\EYFHQsmK82R1^]97\d3)<T+7gEkYKg6OUUb1ec#k"TR)5$"FJ&P)"fCPDZr/a[a&kME$02#'-9>L=\B7\I(6%C5Gg^*M@hbrTZJCPgIifTmFB)c[9W737NVhb:PSek+WPAG6kcD8Nu0_/3"[PD/$GF8r=(?fqLO7)f=LTd4sYX8l=MiKLe;8Z4m,O%j]UJV3Hk2"''9Zcg9Gbc]kSbc]#&S&rc@I5L$heNLDSBESA@E+?6B]?#-Z@mHc.(Tor4j6O&8,2D'@6s>)e0cP:>2`h;b.c;:%)$%4@bJ5$3:Zb;Xc-2DX**4ZmIDFi:s<r5\QhC4\T!jn:&o^lSm981?B5sA4DT<ph75P>DXj`-44DIcr3@?^O5Ad<7llp0OH^Dk)XMN%:LS0OUd<L<6C)tA@D[Es.-@L#VnZ+3!j2#E(kUuIpb["jn*+#\q[M-G?::+f:te1_H[_$X@H=:DNtGI\LJ)a#l+N=I6-aL[?KTG@%#fN_?KfZ*`mVan]g85o$;*5ig.G/)sh?.>9OFa`L<e.?l^ONIC:Oe;j(S&L1_A%-u^YcGG(e5b62T>\8TRGim5Umcjg%9LWQ8R6;%Q=Sc`,frrf"&Xk4anY_846uZL/nG``q%K*-\+It$LsO[D;d?JH5m[(o/G7,)Aa4+jN[V7]NhmcP3IIG>8DZ<2dACPOZ,;>*MDaE*%8B,Z5Gm:N%R7/1I$p'tRU;*RubZOAXIIe<`68.8V)gJUV+/7sU6ZT@fGY1C7?(-2n>i=r9WXq=oT?HEsS^p-=0[);@_Ad#3>B)\#%Hj#@S0iF:s1.-)H"&GZS4-).rBSHp2mV(nGKd[2ORgg6M*MnECs8M/aY*3Qq'W0"T:L'+4\27oqP?Y-+:uNdc,YO`I4`WE45_CGB%AnjXm+[^4$I.DpLq;<Dope!_oQL9?hJQ>`l%QpS!edOq6:k4&6JI4L369(/m<<=8^c#j*F*m)Z0VM2k\(q+CX)0ZPCfiQE.eFUW+%K"[U1+L7)T+>6H:09F(j/+7%,J>nOuVdd1m[j4%#*qQpSs08l'r!BK^@jaUOEl3JON5+"a3:VruHp`^6rI\!8R9/W+H*?,[LD76]%]^r8Dq=NcLh6E!T6f[a[1mfA'C9G(fG_'MSOr'@gfaPk`W2L"Xf^E=#Je'h&aJ$l6-`_#SAWX/o&9Y+,,D,$;DPTfYG<Q&h_MTk%%8$*TiLFpW6&#T;pZJ5(A:l!=I/ARAT7X1S,PgDi.(=_e.f46/4K!/.:oPF"Kc@;A5/SgI0EbD6(9!1-9DfY5:.7@7/-TBD3@TkZ`%+l?r>Xctb6U0[\BYnP,0`gl@,c::@fA7LSLlb^WM='l/ZI\Bef0L@TRX!opgVu/,=,+tY[Dd([!/0LCDDVRo=1%AH6@d2:"Z>dpD%?gY<Ih[/c;]S;^FhSMBZH&cR2)@40r?B3;BSo`NePOOmhi#P[lL`$O.R316ZX%TO-mj>.\7$3PuPn#NFBmd"JT>8DiIP>jXZ(D8:%0M.rT1;R:'?9HU-a&t)L%Q]&m3*KiGq<(-C&[1`dJF;a$T!h"W?VbZfr#V#X?cJOYj[<*D3D1t=KWlQif9e[V'$@d:J<Sop/pFQn%.uCjNXQR?'i3`$tq_"N/Q\0?(#M5Y3ZF%P)#*UIYSFuT=)'L<aFFV(W+R_#r;EB$oDWT8KM)u2q2,)RfYLpop26"OkL&b;CRa9=0%agnUN(4gINCSZ=8[pHQ)AZ^i6Zs8L5ELl^1,NsXHaahZaSdl=M2N64La*>=KKksg(N=ct%/FLu=RPC(i>QKf/I(_,%nT:\d6)_q1%eXjnX&5W<TEC:EK0IT/!LK#LSI(?6]O\&;s9/ts`"GC>j='#q.m)<FoG,\%gJX8JP)]Qc1:*X,4C$`HC^hqc'K\s6F\.e$9Z!3[<%/S9_S.WRAh"WjtD<!;2VT36u1F0Gp&9k@8qh>9(-S`4lK>mrol6Tn&I$:E\WP?<V;R!-6<)i&Eejmpj.)'[PkOi(=6`2b#ReDuL6%;a8F8h"oD[)V"oC`?0a<(Jc1&L!^O&Glo5*kn?34Sc17jO4"-C=5iddR2VPCCi,0abEr&Y10[HY,k#Bo;^n@t(tJmpFnl*V1HdKd%TOPOJLYY&X'<%(QD#n8(#g.s"Bj6-+2hEf:*nq1K\.Os&5!aC60]PW!7[Pj`JJgCu11L-d%@D,[-mQ\-gOU5$Jherss.TJ=\LX'p%U1#O6NZY'QF?1Bdis1_D`D@-7`'Jl,4p\a*XpBGIOq6U@KGOfc0)RM<-_84I(s`^J#8+OJ\@bMS=eRY9$3rl@W6fO5k'oF&YHKuM%o`-+W+4Z*Bkg_6PF(4bMi?Xj]EaCkjSKY2U7uuDQrN_>0T"g?]qYBoHq7Lubo+A5ha*;=l,!]G^jk=?QSrmWO@lb`D"%(;eFDuPQ%Q+p)?cLF485C&9?lb\L^cNO-h2s^AZIF_7P`71PHDAB-mjG&)$%OagSIm'SierDF(<Q\h>jEhF1>Ip'o]QF?*QXZKG$T_sIK.(BU%(^J6Oo-e7p(^C)O2McC^N,asLg*"Pk1<)WL]a^^+/RoceB;6kfb8:J$ZJ?YGfeUQu=h.+gZXo)JdZkb>3EsK_0`%8,3EsK_GZHkd%EjgpHd.X7EU7<fF*8D@n;9kI^NjMdE36Ko0`^._"m6`D%0b.=H9qn.0@iUl$Rm]8@`]3al0'?*WjtY0P+OCQmP#u>dlY87%D()'4%Xc`UA"2#"EZ26%!+)&,):iihpT=^)n6]mR&FLE1T5%[a(j\^(8keWNGpcH/V%kc5NF'X"Zk,IE*rB1d%>]/Ef;.O@^<Q]\r&A"it%PJ59124]l^^D_?.Hc'<bchI%7de3pf">fEu6TKr@d.21&FoaC\N@Kgk^W?H;`LO:s=*cqkE-!C:D\Yee?ZbJ^+^`#$;"s'MhdLeS%JlF?>*hd-]'^l_s[>[9R.L6DY=*7\S7X+$8[(',ug>T3-DN[;_HFC,?"s)R?0Q-m]j#jM5DEb7oXuuI015!AfF+TV9k>E"LJa;5m%>i@L68n[URKX(\LNRqV\[b/g5l1'IS!eQ^tP)]X)k'SmEhCUqL%5u?0Xb3Ns=PArm#XTZn":$-Q'./aefaGmB,efE$,g+E^ns?_>%TYR=/\m4"=D<nScn;1-TBiM>LaOg:q(=*o466>M[lZ)pu('I[!obmKTbe8nam!804pbt6c!"?X^cuYLAbbCB_7_(6S1\a'$8>p2c%djgEHYKr\>AjF-1^U8K<RpSUhm3e:i0QI[D5SA7TGCrBp+UC&R:`u3J<*k<8BEFV&?N.L-rUsEq\p*W#9HpDt55=3JVK]dTF`hhL%<V;,k55s*GWDea3gi#CSEBf.@oD'=f['fh<(G9^=H:R+afD2?8UYk,COHT&g>l4Qdc:dX)n`?T[ri;[jWUoT9*fKc8Dq/`RpsU=u%H2Ap<He"9[)0K:(5"P-jM2SC:Bj@-)UEA7eJaqSA-3O2DN?>k(M7_ci^pCkeYFrCjlh@ShI/+<EBLiHi0A_*TrX]#)&sh/2:[c$l%ejjZ6WP?$j>FPAC:VdGu]41;[P1!<2s8EtHhYm#5GPB<#]!Yd@8C3LZ:Oi-])%prKIR9ca&)R3SpNM)]3'9-2gJ`/Q4T=Sf3?4^0%/6NrFTA,E@:JC@G\%lY:044b0;c@&Yh1J/.[![1gNurcFr8X]Q^=_<=h+K]!T)&L@4W)1?+2@EVJ!dG!M\j.q8=t1ia$9CQdFmZo%VYSk7]&!20J)C&,,JF+NH?g#5I;2*4f3\Hq&-"p^P;f+\Et*<gaj5FG?`HE/aEJ+Hf(Q$!S8O#VlbdApSpA4YjaMU?`UMZ`s6F"i%oEW_Aq9J*8&,g8ShL>:HbCT!HFRrKZ2#d$a)h7YCSa4$s;Ki!'iT$=[o[<^)&"da`Z2spmXZJ2Ks41]E]Nm2h2<(M%,A6Fm``loU%*9f[prSpP35()DAs10<EXlZrTXGPkr^2r0eOSVRaM!lXORSL`d;IB>$C)2G?OY?cLPeKki55aMd:SG$@cr_C4=l\0'^%D,aK5/T5%?hi_]Jnff7UN]HWFWnd:X8C:#5C;_RS3l90%qfGMFTM18A.";$^]%;46bME]S^a8os8&L/S$,(0UYe+B_*=?k!7Z425Q7REV-k@9%gnb8Es,pYS=QO`uU@=@JhYH`SGH$Yb]6*>Mk&n32`DbCf^Gi.7[pAmGs6tgD6=,GRB>6lILOULNaDmK;NobKb9(mi!5Q6^Ns6dI/%+bTVeb!*URIK&>=+UCL7[k0eWG]Je23H4Q`Q@Xe?^QtkersMNnqiaYL\T7%8rsGqn8PXd1&M$<&rkG5;ZeB3dV<j&:/Do!%c$&d=%+2>c/4>D]D5=d^+h3KS>>g.:55C)_@?TonDaht%>+FuNOgGMme(7j9CT_8.rT.1$8s2"Nm6aIK?s6LQ2hYj&gI/062n/$T:hJ<[;%FS[OQq:jT/YP=/crX>J@+5qnKqeqh?i&eXVcqd4\<gE.6/V(QASfWXWDg;_@Y#ak(!8kt(!4Wn,]E[l=]ENh9Pf%8:hof4(r@E,>%%H)SY$NRXuLXuO?QaZrGc,KZ#_"[C8!,b49Y5s#(DZMQ%Apk-HH[-"W`!,SJ^O.\Q!H]AE^'=)?]ENiaje'f=h[dO&+=$p_"Qt"8%i*Uj9i$jYWSMpAY]E$=OZ1Z]?H[5]X1ATbpq#pcNqCo$IHN@O->0"YZn]tj<n&<E:>6"G^J,J#-?N8>9mD7?FLd:N]k?n"cpYtmb%qJL:kk3Vo9$G4[RO.L!f^Ac^FJ)*8RUQ)G5HM=8Nr5VLq?lj(/gl&pTOPmI;d`U@Eosnp^IHRYdkYNOSGikR[VE`$)e!ePkoAP/u%0XgW24Pm=q@<2/!B=H;:r_p-3I(P>;f)uO-7F;pT]`-KSs7ReWE;*!@\0ZXql.^E2q"W-U\,Z*4nC"H+a'Y)F[lA30QZkJZ^-FO-%=*DFX?gmo][km>m`K0KCR+E'+ke1C(d\@o2q>'Em*(umCTp8.,c-K_nj`>p^2t':Tcd9u#`Z7WX\2\NU&+5)S(b#$Ss4uK!J+4o]%1d5)$)*!fWkW^0HpUn!qM0PUrhSV99]_E]CKA/23HL8&2s7ERa",Bem2X'%SqY*&IZ^Y6#\aeo'ci:9L!FB@[^\4^@s8(`\d*g,)%j4Ec"q<]8@l/SB\DX,Ic\,CgSf8$Qer9EfjqsO(4=5shG9=NcioA!uE>j"?/%+m([IVW"/?Ms%<G@(8ChgI`gailX7jqGY6pR;c^%R_4O5o<a#;s*f@hC?Me0SGV6ikF\hNAnTFRgQ?^KJ,.W%;':;VgAOf3qu#HKDsfhNF6EDWf)LO*0C@QjHL=]5YQ;K5q!@f<+5d+r%rjdC7r8R=SB0UY:etXm*s6T="cbB2PUIX43^B3W.^USOgXk1m+3EOlEHJ)BGTC:Uh53Sj?T3d%`gBYEM+.R32\,(ThrVP8LB.n_a%s7P:J^JE06lULot2uUeOr?$OWd,310q(L%np\3G<-huoWB0P1R/Z/+Y1#@#[V=TIT52;+!FsPl8`MN/6+=[1UaH]R*eJnXa&GeXR%d'A]6R`jm-Ali^jYiUtl0@,$WR6pB`E]:J0(VTn1A*_3ZZa-%VT+DWde1c1<Ar*/O)j^qIM)Tk8P%m:F$U?#gb--DTluT`%[\QeY%A[[kNPo2aU2fn>F&W/G66E0U[&ZRHRIFrR$7i@rLKBuhHi)kuN)>fr'9@\:t2-PK-$_#!4LP/OclEc$+338DaVgW@Zp[,#GG]<As%ZPVL(;8[QuX'=_YEp,)s,.0W7W=XrpL@Yn>jRkS<LYjP,<L<$kM5u($*GCaVQI<OY!+`F*DRSiiGm?5D:iGcTl2Tu==FABqElt>Y%g^M_75qSbNjuJ:/pX=3'q@kj=>+9a2-K!$-WTiI_MM/W2!\m)5^_HlSs-LIiR\GsT<XGZ9V<li.:@()UXJp!SnY=BO;/FTO9-eIJ%%Xm_4'ao+mC3\SKLja/@8)7Dr'M?b([2_W\(oos1-?45:aU?7rfa8"U\=E$M[$"n]Nt1rtC!i^nXM]L.U0DM=>+!T0j/d+Xe>+S"%L"r.aJ\la1o_REC<g.;5Q237FgTG'![\cO2ndb_@W1;brM4_aSIJ%PBJ85FDdXhBRDcqVb+Ti!6LsoQV8[ZK3I^+(]$i^;+l;FsG%4*M#mZLG`eI:7>C;;X_CGBYGp:-iNDdf0=jOe]^Xf`=VrH3,g<^3?A?-$hj'(7$CTb]Eh@l;W[;!dah'bMKE@aig'f:5BBj8&85D%VR0>'5&aDG/\*^GFR8Nd+,i:2*OQ'U%OS@)qEmM3QV8gh?4R$CPCP6cJOCB3RI!Z*`^a=YWY780dV#UJ/Yu.>29eD-&S4")JYtS+%rMH91:',9!B50$edV#Pa8=)^1Gir'.3EOI@BUq>%4#SZjf5_Gm\ubFT3#Hh:DR!mR[Z0lj$_m6Ze%DNIUN']Aa).t(?OFEo"f^t`%@*s3B+a0HsRRpMsoJLU4BKt^ehZ]H`nY1*."a_cQeo-7@6,")^\;PKCA!]:<+pDeLEM62sErY'N`BkF\,TS!sC=R,[$2Xdqp;Yq5%-IjJA+7"T,*sT54'uE2V#[j\<=*`h8Y(-t_j8'!gf$no/ecd7#-U=9!^39A<<ilt@-fh^F[#%me*V-?d3mt419ZVWS_)Vr-71"cj%njP(3YV49^dMO`sMkslqlAMM-ol5$U9("c,J4Sc?lnn"5$MC&ce\IAi7J4#%*NQ&j+B4O@a7kTR5pbSWW,A0_*Q[)OR<7-M!JD<?%`<%oMb:XL4U"5Z($]"^_c<=R9"UsdeMZiqn\10?&R+G[&p=5R;6r>&P#&[(^(QG!>%l%);AP^C655Yoc/Z[)"/Y^kKC)?"k&el^+%U*u96)Y=2hmAGH@'l:Rsc+]MVke":7'tglp/D+>b]WS.('ne.^L/FfMI;;O7cX(JGE3WPgW)$V?";S'=G1a1KRB7!N!&]fI\5\?6%j2hkZn0!nj`Y*;JTJ(s.`9\:j+/KDS.RChEMUhS?)`E<Ye]iGn0Q2J&MaTiWkA25`L-gq`A5;T6`R&sg(.aP$iVLb)lpL4[S`Zu`%#'T3/+hI@^mJq3Wol%8WN2Np>"*(_fMBOZUCY_Oki/K.5)m/sKX4EO?Fef*LC&pC8d+LV3/o'#N3WMAOC!/DNn=5hO8<,*PI<0ZQ%4HgoaY&Mt/F@l<<rri/TRBB3Ca;V\?Mk&Ep&Pn8u8O#P8Psi]=WjDZ9^(mDBf>'B.N'/[(T^LDrl6J`,r?!XQ;7;Wt]&:kboViH"%8-`%PjJbhhM%[Njd3iAY-ds\#6nqFN['iH(EpI2`gujjbd0X$cek)%1atdNa3RftR2'$F;Rl'q<SN\=dNR'KlPen+Tng+hQZ0t%.%iN^q,M_/Hk0J4T7E?SJ#cBFP7.ZInM_rcnT5XhQ'CGp`?YV.:OZ(i\qHNR@P]6+@i%b]4;pCOMKaP3"<@:#`Zf_d%6H"6s*eO2Zn%O%Rd;;o'\X.X<pdq]f'#cq]$^cHa#(LcQ-[(fuI@a9/k]bqk.b(./@^\>Mu"0l;WQ$7\\FF@sP*M?,!$k_W50d<Wm7#LOD>"]9uR%"t#(:N.&8^<;?Mb#Zaq-_GV`b5RH?$[6]Yb-]qV[L\g^Vog3j'i$a(*:ETMZZ1["j2-#jWVJj!)Z'nY%.sAl3-NnE?[@5n4X`&YR%eY#a@rN/IR[<O&Ii+*,sWur73""5aAeTF;?'8Xp<ekaI=deU>M(2=%4Z=>'N0k6adBssZJ8)L#cQ`OAK*WQ@-(`.c)!)Bb/d/J;9%eFu5_Dkk3:@jrM<!&[*llB=%/[R)t0CH7]\fksp!KZG6gEY_po(IV?'TGWd]=[;%F:0hU$]V[nY4ip1GTn=>0kTD*[!TW9je8(Y5%Fmn\J%#W^%EV/5^ofd`C\Vbrj%T49;#O&uh>`a?_&L_u416<G&1BP:XHn6iTfs[o76Gd.W(9SWkfbosHlB@2Tm>gh6]PWrd,ff=j%eA\29.=b7+OQ\rr74JmWJWNL^+QbF;&hg'i@Z"Z;>!b=o!SF&)9?d&qllT5o5_DfU&:G,+Gf]?(011pr5"7k$gYa;o\,[WP;(]@N%^tUfA6KDcm5dVn(%#:dlEB"+-'#9,=JPGh6.a9Wt,TsoO"MdBo`fQj,X/5/?_`::/T]uNMGS;CY,65M?7$6e=:d&+>GYG=UJ8>XP%Y&.&&^fco];)L-=%*(fq;@rdg=*]lhV(m>-ZT"^iaYkF3&Y4mo]@3#KQcN5hBOR.XW.OCaBKLAXG).`&$I1gL1fYda"KZ'6EZ016%Hpj/:35h./!R\hdggIqgRbnT3q]lpsQT>b3:(^=tN6umc^UUl9QIXW3V8sOI/=*Bh0rYs9@C3ku9Eus]3udZWGpE(VdA4^KnEMK;%Fd*kOloP7l(=Nk9-JtXKPe-:GU#]j"1KsW1R<5*0k64\7JE2lQ\f[!_GT&VCojlXV5_WI_Y"7u6q65j<1;W>,#>7L;npp$VCVRk_%Jc,mkcIQB)5!5MJZd4'3[7ujn\Y>'FE.YEn"Zq(*7-N)<4k7Q9R9jRR=4,$*[B>C0jo$>FRUQ;/E!KoKjChrPM,C/Q/t4JmI@^ZL%kQ/5/==>D_oJ>=#@n<GJfE#0%Zq@88F==ZOUj`ILYYq1`CsXLid'ZK8P70I2`a,?^Ne3'$kU1:]nh#raHB5=]TG+.GTV!RUW'S$P%T['RCC1pU4NC_RkH``<-lt6B<+49$#Tro?=ia0CBKK_R$\Vg#Cff*2p:LXOlo-g?t"*[^&'QI"QYedieO-2<!b+=ASK%\gTW+4W)%Mt?dZcq8.$Hg=HPHY>3G)99(?YL%#>Cp\%!?]pO$C>aN$(9+6FE_oKfP\AtH=uBHRgR=/q;3b[RKtNmD3\Enh%KUa.%dhu6Yt:S7%(9)9%?3[(\E/K9TnsWCHn[1#bSJGo7'V1*D'3%XCSR>AN%W17$hPAf8GEa]PPC[t1"9O?jA*\`1/NM>3G3eFqeq.`MNQ3&=P)?cJ%CO\e1ZjiL?J\f=%@Em`GHd-'l3\7mk7G_^f6EkTqYTRkW_bQum#D?DXB4>%212SK^^m;<$IO'9tJ0?\KbQ]</"X(s%:0RaIb<CuP%K:m3gJ#A"`7[D?F=rOeR1Q7uNJ^`;?-RPU8oD3-a[TR0e^&a?8D=qaFnRR%.e:Uor;3d)S&_;gJ@lu-d3O4'?_5O_WZJYCPC0s/l%L(:VN#I+bY+l"JO5u#u7X.A-/i!MLTSIkbe5SoGHouKf-.+?Jc$&ts2gJUu#PD7jN#ZZq,7PEksU##c4:^3IAC9/b)]'h"Hj(tD8%PHO7n+'J2EbiHk[G'njO.^4>1"*Z'q'1M'n]*JH!?uWd[U#<;b\tX^%4&_JX97eYo,N)gW/rkm9UM3X2e>QNZU%S'ri3B?!n=sE9%"bZK`.(X*u0i8h#!W/[:-LH'e4lt^X_t.7@=DKEFI`tEm78>`@B1?`u%;0+.O#D1rJ.,jF@Wa"Y'('oaU<MQ&<,;P/C)gBF1i@JC%"[dXA&XN-f^2LSp\D_8gW^#%t+.I?\fhu]qW7!E/&?L-t7'g1(W$[k0F5ho]qL1q.=/"u(_iPDJKE;:<lo%[6^n[p-Dd_"g>0I)D%Tn&M/0DR1G<Yp=oNM:tXZm/l^@!(+-@+EG`(*Q([=]@0WCdFLlcGb%IP`[03/uUT5C[R)n1>9/dDH[=Ui2,#o\e)6f.\iT!*I69,%XsE1M@_!Xf`QLr]aJC#]n-TOTgf7m7i\;`Z>XbD`-#)eWe$2uR3N9gD+UR6Y/\*2[W@i$DJQs1?;!)XDef/fi;9pq&mMVud#8fJQ%[[0H$eqn3@[:>T3A604uFYHSHZCMMCe0nCf*@i:(%809*QnAiu,d5ng*(cI3`_!tV-rIci*Y0ZU(AC#(OuGJ/3,T3P>7p:X!6,='%@NKDoSa1t<DDRh>2-k;d']uXDEIL]l(qLDT6o7^'/Hd;[IOt&uQg%&q9/fR@O`!eWM2u/dCk(aXbuVlD($@D`c<&8NDPD]hWYQ!2%;fTssTgofZZ>,I5,e)03*_kql[HX&s:l)EQ3"MEJ,afg01C4hiW<7s:R9IhB)WoOJdnkBc_0RTiT'<RhRo_5,S/W0U_14:UGBm.8%:NC.]UMSn*<<A9VkRs.Yr2sn@AT=C]<l\$gWbJ[<Ls1k'457k;;;AppTqMkKlJRDJ*BE3%4dGd:Yj"U5A$O(Y(;bm=PuK#Z@L4g&%Ech[4s2'F.dV)4\5.bLiF9EsZ7hAWP6Z3cP-,rN>,3*EiO\gjtrLEUTS85-45b`+V*&S:RD.oD]7>5uS#/Rie1@=cMWJsO#A>pHJ%VtWPgUM5utNc'ea1H))4NbbR;Fs^0<NKcDATE\NNXOk,;KR+<5dhPqB>[qX'5;u(O3YjhRZ%0'T@"_;JC,7`<SR]ufci?H9&>jGG%&K,AjmR#<.DkdX>/i<cakd&(&`VQg*qd;K`f!MlT1B$%EJ\^W)hJEI>&S6,Tg7:8)>711^a).cm[,+lpOP#$J2N=8.@M>ff4q+E*%L%M^>^>tuN%(s,[Q=u=`jf=>ed-P8a17rJ=lr(6XB1*)MmF7rj&`<_C)J)/dd]XfVP?ilfWW.AJFkrjCn-#e,WB!RR/k&iV$&2mh%gc'KX'WJa"aHiQ\ZBnX>4?O<qfY%K-]XAZQ_Wb_B84TE246u^^9;am)T?PBt%A_Bk.bW5=JKPDU)us:qC8pYl*1K^C*CsJKR6m@5%h9jUZA!pA)K%.M//Rt7_SR_f@Q&(p(S$!X?-401.\C"iWk5E;c8>,+br<DS(j-H>[<*N^&**(.dfj+r%?=7HF%(m%m)oq()Ck17o%\fX5=MWtcAD-;oM6f@Xd[2g"i["nj[UNH:FZC5IFX2P=nVL?k2@>WL(m(gYGRVM,0eL5+q]"J@^l6XQj%;f_8#a_XkW;3[PGXAdj%JaP3*4h/WT7iqm_JAps;l09K&D2ZrIkmPJKk016+=%2QLFRanY5tRrl"EF_%)*H5kJP'>UqP'nCUZIhDiLVB(a:,Y_n>7;o<6U$r%!)@i!L0GR2M:0_U*UD'q/Z+\'8_Hc]g\sS'"C8+f)W&2J>.;.YD<e>XU\_i@Wl;-Dq[2"u4e3NFb\uFFeEa^!#,<[QhVOHoqq.&Y%Rs#s(dhu".M4V1t3$;9'Q(/.jW`De#FN7mZ-AX&:$TkC%EEuV7hHc!W2pW(TKF:tE17.[F>mgjuICd@2k-a,*l_/5o"*N=-qLGna%]lK$'deWFf,ZnCV>%jB@F#M2qMsurN)iY5#rXC&VZ0QjBk&il89pDuB+)HMIk1l0JN$qGj^,@D1+?V&c'upf"S47uu*qZpRr6XdL%B<F<R,mc?,.^;]r\k<ZKSie3%)=F^r)b(^U]L6pC/gC7,=(C7B[[SCH`^[MT<m?@c*7/-5/XoYBC\h/p38,/nU^"5Z9fE_%JF#%@%PPL\EQQ0<OYCYNR+Ub5F'-\hB286H*Z&n&C6VU<=o*4HD$4!Q+rpW7,E\Yag.+(J9.l:4H(TQ/UOE@.F'lTtSrRBe5jT[qn%WV&L%gN[>IeX#!rUrh!3U(Tmr3B*\gC%PhMelpjCl`,]r=\2!<GkVhmn]P'hET-WAM-akGP=Uia/?Og@;-JbBLi$>H-JY+O9uL(C?,4G"%VI<-0JU^4TT3Ku&CB;HKiOZLd)"M7JeOJCs5jn,lgcNka24#Q$V<A^u\Je/dK`bU3[YA@Yigaqq47k\an[!ZI2E&rs#0rl^ppgEH%4oJG,>fmIhFOs/@l01;*2b#T6_D'bEAd`^7[%.6cKLRI3>rObjetU0sftem"&:GmMF&pO#&DtAJ*p'HH/cPHDJfJICP8@HZBV+m?%9b/W<C^1GTc^R!Kr,j&cq/0kDk%V!_.9M$U(hn.kJdd/9Z3cVZq'J`K]P1kUG>47YW`'T@dc0M,%i48#CphELZ>2YjP_6`6r&3Yf%kHn[HOV>CibuPM&3T2m2Bhia)f8Pa+Ad3kapFq2@jtK#9*2M7gXBnFBZb^A*LufW&P%Gi2(V-)oENU))BaFmgWgL8WYIsZ\_6"RU%"72_lg6sfS)rGBB<3djYo7r.QW0D0\_N;HMYLXZMG)d7%i(RN"dk[D1G(0qp<SV<E5.`NZ[=B`&UmjClqF)f'VaNc78(bOH3cG[R%CH-u($XS?F2H6>j#!6eQJP=)R%Y(Xt\fR;o/]]#_gLDQC08O"JZ1*AuU$O#\rPE'8kIo,VrqHp;F0j=OIX>fW%a3D-OsZ_3XAIGI%ls-*W5$<HhHOe4-SWl9[\'$S;+?KKS0Tb=Dbpc%+@+TLDI"YQ\0&>2k1T,15jIePFc/k8f1<0.5M!kCf51hD;!WWI#Qu&5HrF*"b%m!op)63QCk0o6Vc]luA[qU0@JdDlEKFAm]T.!1p4m.N=AC"-*0<==eg:2UC5HXBX,,;JZ?+J8Ko=4Cm[>kJ$3lTAookZ3B-.6*5I%a_8K`75$9KB=G@L%+JLi+o:-r,s2&Z.7J"6<O0OE(NaT+amYZ4Wk@s,9?[(bHoQ"[EkitW;2O.Ias"J0)F6T$R_')4'\;JBDNOdU%;o<3R+oO?d4?bIuK[$LT$ZjOI@rgNE<:UUIP:7G/]2jo\`$0HPiWU<l)8qNTV.=U/Ctncf7t%Z@qJ<JlX.P$?Ljf'qfed_LGeQ#)%:Ro0kUY.mb<huen8I2fUJNOKqD/K)"R<S'#AM^Jhcbla*k5&?16pGGC@hH_U<&fs2A[GLUD=SW(<ijo[10uMne!]12ft//.WI)01%\p!YD6-H198;QGY5A/>D49%_cX6'jb:U_`6^r3HC?q!EQ1[YE*UQ>e$>/m;Fh[3`L7@,0K%e+JA@KN<qbHhM?,^5YZ8^1.(B0-4R%I\NtRB^b>ek3A<dcQ891qB,_io-+r;M:-_66H5R0+;]I+E#$=gnIfr$@'Ro`kQ+gHkBYGl`<E&l[a"oIS:fF7aD3fIK%4ro7scMG%Ark-2Uh1R,Hipr&,tmF*4rP7)5dqAF@#2YgdK4[K\1p*aFp]/'W%bS?!%cl4HRJ-H^cne4.Ts6U<_(,'EYk!&r=#?NVk+<1n*I"6%lB"EKJ0k0g1HTl$2B]=I:5"'U1n_U1empgRWBdYSVYC`;$FKcHHPU1j5p<Rc%0WMj%lVrb<o?*(j_INrp(5F$V_.;_-r3TZ@JCm/%T-4RSZ:XDGTe@]?@mLnB4DXD9I<>@&LCdc_47Z_N23<62JQ]>Kcfa2roum+/qj2NPhg+k5jo*5\c[YK4VtWFUntYg2GAk6Hi6X:"%KN-4"cf:1E%/?toP=j."j[A*CW0kCP't:sa``:@rA9MpK`XP*[3eu*;G>T^1XH'ti/)ETSqSlM3f(TWn-*PGl4TM:IdJ6p!bJKt<%ROuNp1k4lO2eO4Be<#XuLP9.'$LT#j:XYVVWm;".:jk-2/S9]JPSlPRlb:M`n_oX9nPBZ);dWn"6)Q0T4Sllp)9JU'7/`N@Fi3DA%)MfK<&D//%V4.[:]i;_43Hj>M^:.G);*j)f_f/od1`EQj,s>KU"9Z"j`*MA.k#-(`;.oiclfLX#QlbbdN]1R5_(@?9=@3Q6@H,`:%kaU^8[!UOt?B23"QAV"qCJta'#G5=n#@)EnkJ;a@*-F8b;%DSq`9^C*\t2/L6B(@S>cHrgflEYXN:t]0VCnG.GUX,Y(G`M4a)Z.H%U*Wl+Y0lr?=$\2:^T+!TGea&)O=SpM<Yr]t=/V2^Q?3Ds@qjeaYe/.tr4@&p0Yc6*J+F=setB#sTX>`j5kZ?2A+-%toB0I?s6X`r%^sQ9;Ode#=$=8WRb+ZT>9LCah&rs_JgHW52',5;XGa<N100;U;\fS/WSj&X!dVed/r.b>9Q#UZkdLuV0`82D3FnN"_j;Q*'4O3+k%=(YDNo=d-@f<#Ln_<^LI!:mEe0(^k1I-,F/Q-)W"r507h3Olup\h=N]j`*+L4VX%paB;Kg"R\i!QL*KFFgg&1]aH@O,!C%651m#8%2k$9r3D,Jpg=GO9k9gNQ`81Tp#hE8^3ecFFbbQb`.al7X7+T/rqh;nH%c1?8716>$'J.nM1jR>DppNFh*F-YWI1+JjH5Ng41+RAT%<2uGU[4Zep?Zh5'2RcT</ZW0(4?O5f7A>L1=*YIXlb&Rf:>q<O/-KA_Lpe]]/R:a\65EVm/uGfoEJ(hUM?6-2WOcH8-no%orQ"kr%_qE3ofejYfrdtchBVSck8?jLe_U]S*K2U3^Q[Us^OiMpA^YLpLcf`[)_Eg/.Me"A=_/J*<*3]01<R)"h&+ipQG59@C<.OKl\%*1!%^g%`(`,Bal.7NEB%!!jJYp$0c-'*j=1B=FQF*J4Th_6@.Y_@OmjrJZfZO#A_!BDleG)fIG'o6.1UXNdSpb]aJWuCh=W,g;+S\JTQ%#=I`>Y3O;)hpCg3@ubA[7qPIf,LabHJVhS0\WN]K\B'9XRMJ<5Bk9ai%2=`p+ZIM3Tif_MedmUC11RB!k0SB>;mIB[h$>tmE9m6<%R(O&)dJ`oYNe97b;WRi"q#V31^]hHYKI@Ml7hS/-,1o1!*B+>#eFB#gh5)MJQlKKA2o?`!eaeU4A/PsIEA:AG`/nMb#$9/%H^)+'%@dWhsK`eA3o,MO(F]]7^Xlia83Xo:53?jpm0N`H-P?q^R;'P][PX?$Q*tqW%Fa8+t&qHN%*-e.2#CaS,!8klZ2+uQQR>88U+=4B.%/5eqHJDBXN]#QSR\"+s#Y4;nmeYfNRH%pkJqN9UZm\L2`/9"nrbQQj2`L1iA&MA6ECCM0pb:q]g_L)0<KsZ@Y;9/aZWg;2mNI^rS%,7]R=g:^"Iq<5mRHNZ!bkgpkq&!6[,_%kR6H[t_A'g/#]gk\BOk!TWNg:kD84>((6ib10Wi\q:$V<OYm^K8Nl3p!^8a[gd5SO^6$%c,RHQgs*i/:rUkm[j^gp35R4M=^(P\gDsJT"\=uW@GTi2eY^tp``P@Y&S.oH'?Mpb%"eS$Ab`K6&E)cNF@38Ta9Nkm`g_`FieOQb%m0l_gKY6??R6_YFHaBIU.WWhW-ub,RXsi>8Mm\2R@R@-7_S_&@V6r`WeGGRZpL:JV=_qpj6Y_JrV=06iF>A1s;"T@NJp/!h^MA93%\mG-kT3YU_DhjVb,Y0$4f`a]P%S%Vbqb,s]FTXoYTDWRG@[iDC>-k:8F;;4D.g2!&L<P)l-lag0K?*c=C6#R=><?p9F3Oo4p6s@N%?u)h./Wo0+h4<S\?fb=TEO1b+XfgmFMs5%EX6n-iEo"-G)CMo;j'HU]]0gAGbAMd[b`rqn2EYRmScrW7JR";q2J'RYJJk]M0NWGU%i^u(io)fql5^V#`frKi^#sK-2l2b-pWFf+Hq%S3TO<*+^_N%lk"dtrA7I^1TeXPHYM_"InDXS=29bMNU8)4C9<G)[]IfT2/gW4mt%Y1+]n+/[m)=;Aj`CY[>,4V=T2?*0.NXOEF#%sJ.TA@h:$,pSrS\h(hITdn!Za/,Z0$r/e$3gH*d!6Ab!^elRa:u'p,M876RVcd)'%qd]\qo:[4@66R6o#-sP0k.7i?";c`"86X9ZZa;+pQC$T#aDsRq\0GU>4;`m\%$C<007+e4F^9t&I44q%RNem)FLpRPhD>D7#L!r^%jHOX/1aRO#CCQ;q!MM'SH5]&EdsL%::spX(0[B@/'qp]$D+VBf7(>m',dC>JJY:AJ?_(b$n:>"93klA?#m8$eN?T;"GD#6#OU2k*%AT0g1U8%q4fN1`:J77A"Eqr;iZJ0!o=bl\0q^3-nKEFa#3HgZSo[k.dh*PT[8%+3]bT8B2Ze^ZH93#tWQHbDe,Q4F&HO8NuNksR6%)o:3;Yh>32N56i&9(%<PDM2N(Bi)@^<sQYL2Y4K]3$$)ZfuFa6$=nOo(1IV'PJ*NI]M9g>qFsW,&21MdM\Y1g1n*`V`-l4SZ/W9(%pBpT(4MrJiArZn2`Cc$JTasMbhObL%.;sl7`+6#i?K\#cHN=<2Ti(</1,!iVARd"/mu3c@\'HCaAR,j'>>dXe!'GOP!o,l*da257%TI4@UTP8427!:\c?nCe#b9O!S_dQ$881.Q)^ntEhE&X64rVEUS'R="#ehZg:H(!-IhgKfi`gK@u=>:"Y[.Ua@GX5^hjYD3C]&]o(%lt"^Wmob>P]/Mcm'tCE2.[]@uBGZXe@klLf#_=Lbj``rB-S@#=QlsEb='+me=eC[mo!.m0mYDf/_fr:5V*k4b[#Z3"]aRl$+_'<+%NN!B%S8%/%jr?Mq>fgg^d)n:*Kdk`"J-QZ"dE%?$4]CV"S9PD>PCkon[hVSK*'#2T!.X`Z!-#jq2th[F1,G>sCK.\Hi($sK!'t/2%jjObkp@I_*!\g>)?9uLhZBE/bVl0!5[_i`ik#!;8gZ^AEcq6""9R`a);>SL>a4D$dF`.@HX\EtIq2IRiV(F!oJGjPLn_U?#O,SKh%^=r"3n^;7uBS?f/JhTSB.41Q*:D=ek(''A4N'C!n:FDRq"sHZq&C;#URLi5V%eV634/qK(>cilKiM6Q+=%*pI88%.&4\J>lhi&;#%E&&]^c7+e^LS44QF([G(C1_gC%Fm>(E":eLH1/u-$b%[!@t]iId%t<;Hd>)4%Z$$0QsUO54:[/D)h0o`rXN4maX>,s*HuS;QXClY%\fu)D@rdpLAU(H$:q]1(cf'XNcKB^M]cQG@`'97n[J_$Q!K:W_ol>?#DBC5hS9E!-G?WSL,FT\K6#GAD+.Q9'rY,g$QEK=nfXQ4q%co/R^#?7/6]O!6sl2b_lHL.q?QA_ot.6)6s//lnErsQ1_P8p^TM*YG%DFh#fK/Kf%cl,'J[V5X(/\%9L3;A]/B`)!lAQXJ\RK+^r%S;RQDX-Q]Vg17"E4#+.PYOLlGJ.%9D2AX1or/aIRl%=s(^GcUaac3qZN#TOjF=?2-/>-Ns\=gob;OkK0G%Z21#WNjhUs3Z"!EK%u%%)hp8^W+t;-*5irRf)a2U,GaO2EZY4$"6M>9@qq7E1`Y/M?AIOWaNR0e]BX/Ir@BG?_/j*E]$1==h"Hq[dql6foMCoFp*3`i67Tf%m`m4<)RgT^kVpL0WAbD:pWEdl_Y%\Kq.,M.5"*]F)*5@X-7(+&LsT:Y2C6k6>S5(U4]L4soYU]O=WdCqcrHJNE?_Up3(X/t#9CQ<%>p*CD/I5X'Ol[k>rVe7ga`7;L)iZ9T#Em:=I.6@0rna&&0oa!JpYa74>EOLM4''nhqjPm'-D0p]>YKeeF#<kB9-1;]51p)_?'!rl%T-Tl0L8*p+p(QIo(:O218l\SD>CXKIK@1F+],VJiC8N"(+HY&g8s64N,Q(Xjoai.*N:RW*(G/U%r8u3YXl;U/Zocjs3?jmXd3bm)%IDR_Nk^iQN0:]s#RUtpq66ipmP;5Uq<_gg75">`a(1lI#q0R/1Jrl2%3?A\p61PT!lnhI(n6]Jh3m5$=1eoKc4_s5V@Zk@W_+`4>%Q\l7d$SRd-f4=I#5^(F%;@3ni_VYSO'oVT<?@e;U%LXq$911Z;0"3G&ddg&DZiK0`/>)">9#u9Yb0!?Pk*.Zp?FBia_'dq,JFB"m%/N(d<MRa-):+DQ5B'5s7a6]>Gm"0=u;DV[Md?g_LgW:hno!7_SK^7@:m>.V=S=DEc:JP()E`0:QA7LfaP$C[MW]HPDU`&b62JG_<%'N[b=Q;W&_6)34GUh8K^4!V.=>Sn[pA7qAYA*4HWCo\g+<@&+pN&#cJ-R702@oq*NV;-uiQ=&XH"X"me$Ubnl<:.85B;B8K+p[dK%r@q=tT@=JL4upa_$mu,R;-GpcG7%P\3U+U>4"%RRW<L9g9Im^66:cjVIK4uE4)Gk>ZQlk(h*)I.NAAaX(_Z'7<@e%/kTp5]*X!TT%Tf4%AU:=L#*?]4=Y1P&h'-JaQ\k<lT3\Dn?jVKbeIJk1=ZVKs#!aM;L8Z,_qJ>jVM/7pq^`NG-"EdY+U/S.ZE[P7lGb8.3=^&u1:%ccS0LiW3HAQY-O/k5i*`dqr\7e)pUK_H*UoL]D"I\e_R8b*IlnbRV9Sm<CsOdq-/]7Yc%(:%?F-?<=]ZHtIgib%_'0iNM/S`.kgb%plPuN)4s/UcZ0j_5c,J9MnFN@AESiE"I-O8=Hr^UH9b'D-<)RF4THLD2WZ/O[Cd:5+cCVD^g7G=Y*QqWN@T(q3);^U(^oNtli:/n%;tXW]WYQDAI[Bk5+e+F5h-L1TT:Uh09fE-s.ebnLe@_l'oW^!=F\!N]Vf>r&h?LEiEj(;\\]E/tfS2lG(V*'4+CA0@4[@#\bmk.X%J;e95;K_@7U1sLnCqTZeMgU5gaICUdmu&.f*?s/P\Rg@t(3q^Bpp.sk0$+pg!.[PB\]>Rp/FjP8,4D"DD=K;,)NE<:^-X_>e\\kg%!83$*978YZVfJ-X=*_2TAsQHR#Kl*Lb:6"7&m*Xq%ZS?NHWoQS367%i?7cEN_T"*:4PN9$-UG2bRmdM+7FRJuqg-&Dq1.T_DgJQo%?fj_j=I(rKkK>j.CRHCeI9k>upq<d!"gQA?V]7=/Y[fpkc%9UI%SQL6k[]7^beI1M2q18nmgC+#/:0nc#T-gt\)i9FQFF?Qe8p'8%`QZBqm4H,%=l1_ThXk[kPNsBs/%RPQ):nq?Re,Utos_'l",&N9?s)p.^,]$EeST_YW:0Y5=l1:HHIuP>leB>ROi./=J8pb8qHa2,%hZjGQgVXe,ggNl;QRifY68gpLeWud4fn=5>$'=`\V:,RClpdINptF=YL<_(2qte<6Xf^?fhs=BdXDb]4Cis+BkfhP>`P`#&=OnoL%j%5?`[ib&!A&Vh>C9122[([nEei/+kFuQRB<9lnRf6<#B5/b1LiQG'A)4Cs0ahYX/&!1q<;Z.SNS8<J8Ig=%A@pQRq5UWTp=E:@V%'3sWk]<\Z_$5o<9h18<Z$+kO@/Z:02'[FBZe'^@P@9?"4Id/C"ok8[ioa9@`a#KXj)-;LI2BeC(b734[g&OSYg$:J<3"G$/!,4lV%_$!-&Xn+"Ens-1\W3BBS"r36]4<<&B$5jSQ7F_nu7*?r5WNZAT$5;-m0VCu@R(3tAE]1TB@>/O;a"X(b)%dFNjVAb&bO2mLeV7[D%'H"ndJ0!&8O8R1Brmr$qq*1G2Ac@fbU4pM_-h@dMk'r)$rfaL?kPQ]SF`#G(!fZrIcp%I3Re)S^n(TlPU[<a8.qGtL`pj2Q#a!;`%Al9aU-EGhR!#?JHBICXuM$hok3(tg'o4h5aSSFq:Q)H$9=0Jd0p.A7$Y+:TV@,r>S5X2/LN.)#P@Y>61W[p\V0nW5Yd1bYEN"GGG%c[U+]lJ8WhS5-f7FB)r@4bUf&g"FWOljJoTgHVFEYX),en;G!BX,)1ID;`s\8N_rJqO>p`acSVgmS`o5RcChXbW4!-(KWi^I8Cd+%[)cpX+<NhRQ9.6!Ea_7j6)?oPF9P9OM`-!f#**h/"0u2a%0U87h5_Vmh+RELGa5G^+)>?YbY96V>b@b`?a%?+\XFL-7"V#D^pRa^%rZ=A3cIs!"[EZ6fCU:Qo](rm5^oR91Ns8AFZ3H37aBNKg6S14PHYk([PKJpC*GNPbjAXbI3HX\rF,7mud`s;>s2EO"NjRO[R'[g_%:YP3d:YMr$+)<p6*A]@M[.Cm*4jpKX7bqAGn<A*k[Rn*=[RiR;^`I2K)E=kb83<m>8@uRD6+ah9j*+#IH/+/qC$1aFI\iUe_/uNE%7md&mTUjVUUtsmXd;H.:dVc6Pm,$NEouEM]["F]L5,I'h'27-UaU+je*bi+8[a8oqc"Q:*h.rjX?Wc\tf.$)hgIf)c2UQEEm.fBc%m@%f\g'(cB*GJ$5m?)Qcl#UjPY#F&6#)m_PoaC.VoaC0\lAmeCBntUah[["$e&jCZ(\I:7`RPK[[+fAcZs.<%g''U;EMVFI^hI(E%g0&8CmFKuZ]="s)G=U@AEU,(@pe9C6462MSjZpF#F2u8M\rO/P)jmuOePFodePFo$eK8QfV&_AaYI'5J]u?7[<(&CBIX"Js;;7o&%>2,iY$dPBkDDZ<9f9(5WgQ?Z+D1d"YA]O6Dm@r%e964*fMTgN;q<4o5ZM[uE=$I[Xd^)13+;MNNF%_;B_MED%D18Rc_h[+r^0c1t%<0D[`QkF%aJT9**0^)%bY\49tPS=uKGDe\L8Nd'l2o]B^5Zi69cofr9n:L#Y9L^]gBsI+N(J$D(T.,t0g9'"$B6'KtN+N-'Aj3TH%aJ%n\6ul?pFn5JaI*l5nbWac9FEGpt2tH7nG&s2"7h<(+\b0pjMp$GX2tPU-HFVXtoWs<j%!1g0e+:Zi^;LCJlln5b14gB"$t+f2%,M1p\I[2N?dUUBAfUG)!#VAO$+3VS74W1@(ZOC3C@2XcuGGr;m%:r_M-qn/=@@7bpP+9q!Le[Pcq87#jG88@S?J$e1e9UZ0iCah8%U,\-apMddF8J[rDLp4Kmkk.2gQCA')(.GjF?tlSp6O9/.O>SdW&9sPBe"TF%H6#HHAdf`gmRut#GY#Y8Qlu1<+L7Rf,oMo<K;r>e%5#+pP,\_<X@shp>A_M+*@t;6#,Q>*-4]mHb`,f6(X'm&@:!dKHbl]t=JUtAomDsAs/>G/\0L<PQAMIt1NA5(h_s9UcQLa&K+EL;B%<IC#kB&2.%?,g(UDl.Dn`h.S$#Dpp(,4'I,$t"9W;0fTQ5V]42>2D5`G`\hfh\;Y%aPM`l_1XcrJrKFT@jYm/<M#DH6f,FqpM0/Y%#R9l;Cn3;[,m@4$HS_u>pYU:,)EgJp6o'B@1dJ-.TKnq@nDKP6ak&t64`9sYE].\!bcn_]0Q5b^s,PTM6!5H-TUb-p=O"t@PVP&e%PqdZGJSg]"^Ldt2q-hLu01:il\,L\".E[sIImVL^6RG42f'Cb5+N5BQ%u<HrC&Q;J_6ml!(;hqD@/>q\%K;)4&`<%`8go"2Y@7F=%2AUtZ=DD4s:WIH(oqQAi99uio&%/r'"/eG&]J@`JW@8ee-D8%7>9SaZXgNBZagEDr8hDb2D-@f3`2mMN7S=,bhCQ(5^SbSQABlK!%qWUJOW2Kfor?BQOS-Ul"f-^)e<@1Y0M@'D#Jl9Jl<V87$T7u,=#<3=!LP-a'L.)C[pJMZ-8fa0,B9'JZN?E)+]^U\kp<_fIYs43+%@b[`GUHOh1E(@2:V'UUbjpOb!YD;Ff>><S^k)qm?L]uXG#F\JdF$&]WfJM]m?[=L./mSc;J[/G-IBrFhNS7WrLN5t3\.@]p;=A,*%NO^k0i10T;3K^?6%c"NG#gms"m-RM<@l[!r+Gh]1E7.Cc4DupcKE7<7G+"VkJZ]"18@iRc)g12,7Mn8naK=*$*Sph_jP@KXY4n<T%%DhQZ<YR*:B,TdXRH=FfpCid,*Gm7!7MjF;el%>LOm5%\^hm\&=7V&BAcbEXlZZKd:WSJ)5%#RU]oR;dQj4KNVPm6'oLj&FC<hc3%ZU&6m!"Rp>6U=UU4$J5/;k*TMm60)Q,kQU@8eRa^c.,GP=Bp3[.5UC.c.d;=H\Y)epOUQGZTHPmj1T;CmA1ebaOet#4`$n76i(?[%SOpDFSk[&93;Bm;E&HV()_uohcFh=Uee0qCcDAbGZh+I&Di=-"U."0gQ4O'\A>L@D#Uh@eJPQP-3q&VmG7YjZR?K[_fhF^\*(]:=%*m(<VX7\Gh#>gu^6Y2]<_XJ0KSVe3[3K$R=mo1:q@dZBM6W[Tfk2m'kB*g]m.9ZM_fjM'XM5=-qrR3@b[KClSR_;\0pE49q;f[PU%5&$Fa"/oO[O`>9G(d'Ple[8J'4aD*aR@kA=R8#%<nV/u_NJI<*[tJlp8%.CrJ*n"[2Dr`d2@6jMEnP/a4Xs!*/p.gj8gDT[X]q5\%Fmbtj<;6ql=Tl27;D.e3?&=k9/!stkW7V6^Y*W!G*i%]8+s0r?8XnsQoSpnm2)EAR04YT^)n`MY5oY6#]c=>_O7.]CE?I-"/-HCR%dijT05o;W`;lfEi#(P;%U+d6RU3f\#6Hfmu$GQ<In=1LMFZ"'EQnCtr]NW<i*&-SL#f,]_D-kRqHB(bn$koT5<eVKlfR)(>=Z&io%$K-11IDgn^.KWRI;]59flcmXlUbDB-?eU(?XN8lD.E`M1AKq*BOMK98gi#\5HQYXhTJW-8=sOU3JT"iYPQ:*6*a*V4n7Nq.=m3k-%H"s(?a?J1";dh%`W3a9'e7aCMF/Vsc"2O[!=<acc<?6gLJN*-e*!;9e:dc5bW5H6EP^/ph.817j%1)m$NJI:b-h88!+U33Z/FSm2%'a$r`SP(P73$r*5+uhb,KNd?aY(dcD?DA3Cg:c]"5?KH"NV8XFU:fW4ej9^@3rt8I:8dtI1QVJ#lu[PA#!KGZQ*,_:f-6c-6[F0K%16RWMO6K?-"BSALX*p[F%KUZVhSG$-Q9?YK1DNkYA$T$P1>_QTD!d%(RR;PZ9/AICRN*?;*ZcFb_RbkU(lBi,?;YJ!Z3-DfcQ'Yg%RHZW)=r)W?kr*lRN4N/-;.dS>,m'EGCN!hY^X6E=E]PNmf4J?u,TC,!`=+:R(5B7@g9]#HO"0]-:h!_%XUrt:U1.J!FJ)\r[1Pu&%5dR5mmsCJeX^[QShg7EeTg'?*,$MLPP5+hrCn.(/]Tc5JmsZpR$2:7tFdK!O(i`rMLb9XUDbQq+[r)Dc1obj<D^j^e*QAfH<$r7M%SC@nn4aX;B_\-'U,/B7M,?W+PF?mHROb@o.$o!AQ+l>G0p4J]M4o4aBcS!!1m#01SHM#JX.iipW#J@/\nQn2)q;!\GIJ3K7kKgp:%g9&QAY9*]>M_@:]d21)8l31P^s,HW[im8]eeQBBn,kKrk2j(0X0HVF05T/68:(TWF3M"_'J!OWjk_R48/B$!KbN&[%Rg8j)`:>5D%A^grdl?R>C6L0ho4nS%u995q9fqI_Pp>E,6Z7SXpi%GOr41"XrLRF3#NO1k$s-[\CceIKK^%")qpAj.;]JFWT7+N>:#[c5!>BBP?%cqN;KE/CkIlX@RpCOD9*R(nDofkX>%%Oo$VpS9^'9lN`0*s<T\/_m\dGT>"Mg!e[MboS.=,X1O4bMk=OVl'!(eRF(&4?e9Rb6VWr%ot3U/M0s9Bi?Ob;-6HmB=_B3+OHT&mm(%N%B:ms7Cfo.lfuNK[7BZ%<G'LT69Dc6TG`-D!o5QQFbY75AAOso+6ZC7FYu/)Q25:]!%A&?;B')7:5%afTLIW7UiRI)OMV\6fofZMSicWi3s>@Up)+6d;k6Z_=oVn>2^PN9cR5B=QC8rK_!4p`!25]NU`TVVj,@P)p5lpf0:%7W!0<_G&["l#;HDOn?R<c,kX+V$'&?-4#^.!OG8/NQHJD#^g#j0D"p+7Kb\7=3*KbRk;)f]Tkd5#^AO:IM@Q>Mm#uI!@O0["Q;=f%EtY$05.23!7?foP:u9HXN:jIG#8q\^/s"VPi0FmlDWPLs*s;B'OYe886(U@ApRQs<M+_fRB!`c(m-+eXFBeh8If'OL8DHD`+is*<%:K.6XS-42?a"m>SOEpR2Z#`gggM;h)]K]K5[@BDH\EEiO+)+\t>;.C:F)F^sj2]'nd/ktci6i63nWIHRZDME5k@&n#/Z>BI2%\P]%f,95t*c-^kYUO:`]?.]/=eM"upIppW]J5\1Y@n75D_'hmRV*BZ,^sWsLiq%oK0<eha"fb(NbZ:/#`B-n9f79_IWf<(f\tT]aQI,2%9._.Y]qo3#K*m7ZOfspe^"/;l;NU"M\i;tQ#D(.jlD2F542i^jq/-u5Qa`2qiB^?X4S`m5`mrR%L:cT1k6g#tb%kfRJ/[RF=B':i%r=u&6R4FhV8bi?3>lIV,)2+Mf_*.<,MMW'DYG,'7_X=-0a2VfQ!AV0cV>VHK"mi7&KuWgJCZ0Ebg618_+cJ"SQW+64isXACQ3A*W%/^W_+XC_%u32YfKk0s:JNb6S]]7.7W=^h"7aM^)FMg2)4H#U/<BQ;r97O%1KiXR]F*=YqY]MNj'MP[92Z?^DsY3XTUe#TC*pUG?+%jLc*Pk"X0k'UTEZ9j4aj4EYT:S$VWH8L,I%6JXu=(5Y(ncJPY^mU![ZH,)unme)3:[PrBCP3,([kJ6n^#qdC*2L-/E(P3+9R>E18%mo#_^]Au"A,1FBST2s(iZN]=5FOH4s1]UeTZ:hVRYE8:S3ZTFZqO-]Y-!P16SkDR+7eG>p-oVt)TqL;i2$e"%b`b&9ZBDh8!ID>J%G3%MhA-+(m.s_qdW<OU)'WQI?,S0-:jmI`G$VC%U*kE8j4^N5^6j?uW^=n$?/U,MV,ihqM:O?Q`&Ckle4)Q*C=]KK4AE.'T\>H_l%^H!5=*X,SB;gSiE)?cUPbYp6GZ^/4MM5m&bPE%bb)/?"><crFJQ^Q'`:[E]-/ZCTH9:\)a$j3J$%pb.UY=3,b=FRTB]6fBl.lu&E%fTWAkYU2)2Zk,@$?*suB3b,f/k3NduWJMJr_*)rg2"pVmhicF_8mR`&=Q#e#GW)cR.%Un7BoQa-HXc"cFj1+[C>Cd'>q<VFSu!;"%!IS!I)-[3io_.Xk=6`sf-YL-rb:AO6hUmo9^Tj-!F\ePjOGbX^*'1i95!-NGS"8H;T:Om*^J`[Kr5mgP_H[^%n'I4`)3m:Q)9Z'n%6V@pNojbT`R*_!>H2UcXPUEc$6J;ZU5G!^r!H#Ok1F]s3I/<3b%P>5Uq/L.bk9dQJ8mX`jKZXrhPgfJ+1.90!b5%G"clW-^hG#9P%d)0YJf4..JZcA$Zh7Yru[(:SaU]RrNEpV04b/(PK%h9Zp=\CVWC&:=>T\a@#NDUi!5jsE+'(!\=!>&%%CVk4UW<G@;oR\)<`Se*b%OLW4q=EO]cK'DS\PQLorZrK3?TrAI9%-<DZ*g2,Zs.1.G$;j7%d\/&W$a//M34kIV4geC7<"kq&MRfXVYX;>@^r_97aQjtJ$L;WZ%'ip.5_NbUZ)f:-.VOffuL#"4fqLTZ3qKIX%6G%[Hb65;PCS7@Wm(cR=<esqsPo`XhE<jG`7oZt`%5[guXuK*gf+XMhKNlApB]opV%@*6@sRJ(Tr5>UAShqY4rnFVn"Y!;u[^XfPRXH4k>kQKcS^E0*^Yl^dkm#\1YV]>i.A9m>_!j]4.mYN"A[hF$P*LLbJ1jLM:8D_kK%KD?5`+R(F=._YuNp$Sq,-H#A853jq6BoCU*@7?n9q9jR/?<ji!X2qAfBtl(4^s]q?95?uL$PoNfd!BE@b#a%+m4'l,rhIo_n25t]%rNHAs&C#KpFGU5(9PC?>r,BsVXSjWS&n*FOWNau3-YmX?dU@nX+ncH0]^OBX""gn4_+BU![Q.uIS!+gR2!M8p32_80rYfGnag]Zu%h;i/B5'\I2DNT:9+j^Mfk#Q5Sm$;8klr+S/\69Qq]%t!Yj]cX`pYPlKqrRW(]i-T!n`]uNpHS]=Mt<;-l_B70htm87qu9a4hu3,(%8)K9_YFZd*1LiP^rT#MZkBbs,ocED0GjXkN>Ap>KmX5#U`CJh@Irs_jfsB#=o?jK1hg>"CB+ODp3rAR>7pk.<s60(#EK>>DYPg-;%T0Bjd\CZ',r:-DnpcFT:aXI/TZZlEGNO/Wqah!qA~>%AI9_PrivateDataEnd